<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Weekly Report End to End Suit" time="583.069" tests="1" failures="1" errors="0">
   <testsuite name="Weekly Report End to End Suit" tests="1" failures="1" errors="0" time="583.069" timestamp="2020-03-29 00:33:57" hostname="bksangani - aixahm-ts6.analytix.local" id="Test Suites/Weekly Report End to End Suit">
      <properties>
         <property name="deviceName" value=""/>
         <property name="devicePlatform" value=""/>
         <property name="logFolder" value="D:\\Users\\bksangani\\Katalon Studio\\ReportBuilderV1\\Reports\\20200329_003354\\Weekly Report End to End Suit\\20200329_003354"/>
         <property name="logFiles" value="D:\\Users\\bksangani\\Katalon Studio\\ReportBuilderV1\\Reports\\20200329_003354\\Weekly Report End to End Suit\\20200329_003354\\execution0.log"/>
         <property name="attachments" value=""/>
         <property name="hostName" value="bksangani - aixahm-ts6.analytix.local"/>
         <property name="os" value="Windows Server 2016 64bit"/>
         <property name="katalonVersion" value="7.2.1.1"/>
         <property name="browser" value="Chrome 80.0.3987.149"/>
         <property name="hostAddress" value="192.168.16.190"/>
         <property name="sessionId" value="aff82605ed26b160ba14982b6e4a0763"/>
         <property name="seleniumVersion" value="3.141.59"/>
         <property name="proxyInformation" value="ProxyInformation{proxyOption=USE_SYSTEM, proxyServerType=HTTP, password=, proxyServerAddress=, proxyServerPort=0, executionList=}"/>
         <property name="platform" value="Windows Server 2016"/>
      </properties>
      <testcase name="Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period" time="558.53" classname="Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period" status="FAILED">
         <failure type="FAILED" message="Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period FAILED.
Reason:
com.kms.katalon.core.exception.StepFailedException: Unable to call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' (Root cause: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:39)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:70)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	... 18 more
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
"/>
         <system-out><![CDATA[2020-03-29 00:34:14 - [TEST_CASE][FAILED] - Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period: Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period FAILED.
Reason:
com.kms.katalon.core.exception.StepFailedException: Unable to call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' (Root cause: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:39)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:70)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	... 18 more
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more


2020-03-29 00:34:15 - [TEST_STEP][PASSED] - callTestCase(findTestCase("CrossLocationReportBuilder_TestCases/TC1_Verify successfull login"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/CrossLocationReportBuilder_TestCases/TC1_Verify successfull login' successfully

2020-03-29 00:34:15 - [TEST_CASE][PASSED] - Test Cases/CrossLocationReportBuilder_TestCases/TC1_Verify successfull login: Test Cases/CrossLocationReportBuilder_TestCases/TC1_Verify successfull login

2020-03-29 00:34:15 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/LoginPage/Login with encrypted username and password"), [:], STOP_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/LoginPage/Login with encrypted username and password' successfully

2020-03-29 00:34:15 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/LoginPage/Login with encrypted username and password: Test Cases/ReportBuilder_Pages/LoginPage/Login with encrypted username and password

2020-03-29 00:34:15 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_textBoxEmailAddress"), username): Text 'Cafua_Dev@analytix.com' is set on object 'Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_textBoxEmailAddress'

2020-03-29 00:34:16 - [MESSAGE][PASSED] - Text 'Cafua_Dev@analytix.com' is set on object 'Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_textBoxEmailAddress'

2020-03-29 00:34:16 - [TEST_STEP][PASSED] - setText(findTestObject("Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_textBoxPassword"), password): Text '!9TgLT8dK3' is set on object 'Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_textBoxPassword'

2020-03-29 00:34:16 - [MESSAGE][PASSED] - Text '!9TgLT8dK3' is set on object 'Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_textBoxPassword'

2020-03-29 00:34:16 - [TEST_STEP][PASSED] - click(findTestObject("Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_buttonLogin")): Object: 'Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_buttonLogin' is clicked on

2020-03-29 00:34:19 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Dunkin Donuts - Executive Dashboard/input_Login_buttonLogin' is clicked on

2020-03-29 00:34:19 - [TEST_STEP][NOT_RUN] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"), ExplicitWait): NOT_RUN: waitForElementClickable(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"), ExplicitWait)

2020-03-29 00:34:19 - [MESSAGE][NOT_RUN] - NOT_RUN: waitForElementClickable(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"), ExplicitWait)

2020-03-29 00:34:19 - [TEST_STEP][NOT_RUN] - verifyElementVisible(findTestObject("Page_Restaurant Intranet/link_ProfileIcon")): NOT_RUN: verifyElementVisible(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"))

2020-03-29 00:34:19 - [MESSAGE][NOT_RUN] - NOT_RUN: verifyElementVisible(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"))

2020-03-29 00:34:19 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/LoginPage/Login with encrypted username and password' successfully

2020-03-29 00:34:19 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/CrossLocationReportBuilder_TestCases/TC1_Verify successfull login' successfully

2020-03-29 00:34:19 - [TEST_STEP][PASSED] - callTestCase(findTestCase("CrossLocationReportBuilder_TestCases/TC3_Verify Report Builder Link functionality"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/CrossLocationReportBuilder_TestCases/TC3_Verify Report Builder Link functionality' successfully

2020-03-29 00:34:19 - [TEST_CASE][PASSED] - Test Cases/CrossLocationReportBuilder_TestCases/TC3_Verify Report Builder Link functionality: Test Cases/CrossLocationReportBuilder_TestCases/TC3_Verify Report Builder Link functionality

2020-03-29 00:34:19 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Verify and Click on Report Builder link from profile"), [:], STOP_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Verify and Click on Report Builder link from profile' successfully

2020-03-29 00:34:19 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Verify and Click on Report Builder link from profile: Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Verify and Click on Report Builder link from profile

2020-03-29 00:34:19 - [TEST_STEP][NOT_RUN] - waitForElementPresent(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 20): NOT_RUN: waitForElementPresent(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 20)

2020-03-29 00:34:19 - [MESSAGE][NOT_RUN] - NOT_RUN: waitForElementPresent(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 20)

2020-03-29 00:34:19 - [TEST_STEP][NOT_RUN] - waitForElementNotPresent(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 10): NOT_RUN: waitForElementNotPresent(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 10)

2020-03-29 00:34:19 - [MESSAGE][NOT_RUN] - NOT_RUN: waitForElementNotPresent(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 10)

2020-03-29 00:34:19 - [TEST_STEP][PASSED] - delay(3): Delayed 3 second(s)

2020-03-29 00:34:22 - [MESSAGE][PASSED] - Delayed 3 second(s)

2020-03-29 00:34:22 - [TEST_STEP][PASSED] - mouseOver(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon")): Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon' is hovered

2020-03-29 00:34:36 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon' is hovered

2020-03-29 00:34:36 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Setup"), ExplicitWait): Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Setup' is clickable

2020-03-29 00:34:36 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Setup' is clickable

2020-03-29 00:34:36 - [TEST_STEP][PASSED] - verifyElementPresent(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Setup"), 0): Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Setup' is present

2020-03-29 00:34:37 - [MESSAGE][WARNING] - Timeout '0' is invalid. Using default page load timeout: '30'

2020-03-29 00:34:37 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Setup' is present

2020-03-29 00:34:37 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Setup")): Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Setup' is clicked on

2020-03-29 00:34:37 - [MESSAGE][ERROR] - javascript error: Failed to execute 'elementsFromPoint' on 'Document': The provided double value is non-finite.
  (Session info: chrome=80.0.3987.149)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:53'
System info: host: 'AIXAHM-TS6', ip: '192.168.16.190', os.name: 'Windows Server 2016', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: com.kms.katalon.selenium.driver.CChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.149, chrome: {chromedriverVersion: 80.0.3987.106 (f68069574609..., userDataDir: D:\Users\bksangani\AppData\...}, goog:chromeOptions: {debuggerAddress: localhost:13471}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: aff82605ed26b160ba14982b6e4a0763

2020-03-29 00:34:58 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Setup' is clicked on

2020-03-29 00:34:58 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink"), ExplicitWait): Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is clickable

2020-03-29 00:34:59 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is clickable

2020-03-29 00:34:59 - [TEST_STEP][PASSED] - verifyElementPresent(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink"), 0): Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is present

2020-03-29 00:34:59 - [MESSAGE][WARNING] - Timeout '0' is invalid. Using default page load timeout: '30'

2020-03-29 00:34:59 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is present

2020-03-29 00:34:59 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink"), CONTINUE_ON_FAILURE): Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is clicked on

2020-03-29 00:34:59 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is clicked on

2020-03-29 00:34:59 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Verify and Click on Report Builder link from profile' successfully

2020-03-29 00:34:59 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/CrossLocationReportBuilder_TestCases/TC3_Verify Report Builder Link functionality' successfully

2020-03-29 00:34:59 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/ReportSetup_Page/Verify Add Report button and Click"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/ReportSetup_Page/Verify Add Report button and Click' successfully

2020-03-29 00:34:59 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/ReportSetup_Page/Verify Add Report button and Click: Test Cases/ReportBuilder_Pages/ReportSetup_Page/Verify Add Report button and Click

2020-03-29 00:35:00 - [TEST_STEP][PASSED] - verifyElementPresent(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink"), 0): Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is present

2020-03-29 00:35:00 - [MESSAGE][WARNING] - Timeout '0' is invalid. Using default page load timeout: '30'

2020-03-29 00:35:00 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink' is present

2020-03-29 00:35:00 - [TEST_STEP][NOT_RUN] - click(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink"), CONTINUE_ON_FAILURE): NOT_RUN: click(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink"), CONTINUE_ON_FAILURE)

2020-03-29 00:35:00 - [MESSAGE][NOT_RUN] - NOT_RUN: click(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/div_ReportBuilderLink"), CONTINUE_ON_FAILURE)

2020-03-29 00:35:00 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("ReportBuilderUI/div_Report Setup"), ExplicitWait): Object 'Object Repository/ReportBuilderUI/div_Report Setup' is clickable

2020-03-29 00:35:00 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/div_Report Setup' is clickable

2020-03-29 00:35:00 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/div_Report Setup")): Object: 'Object Repository/ReportBuilderUI/div_Report Setup' is clicked on

2020-03-29 00:35:00 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/div_Report Setup' is clicked on

2020-03-29 00:35:00 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("ReportBuilderUI/button_Add"), 30): Object 'Object Repository/ReportBuilderUI/button_Add' is clickable

2020-03-29 00:35:00 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/button_Add' is clickable

2020-03-29 00:35:00 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/button_Add")): Object: 'Object Repository/ReportBuilderUI/button_Add' is clicked on

2020-03-29 00:35:00 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/button_Add' is clicked on

2020-03-29 00:35:00 - [TEST_STEP][PASSED] - verifyTextPresent("Cross Location Report Builder", false): Text 'Cross Location Report Builder' is present on page 

2020-03-29 00:35:01 - [MESSAGE][PASSED] - Text 'Cross Location Report Builder' is present on page 

2020-03-29 00:35:01 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/ReportSetup_Page/Verify Add Report button and Click' successfully

2020-03-29 00:35:01 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Give Report Name"), ["ReportName":ReportName], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Give Report Name' successfully

2020-03-29 00:35:01 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Give Report Name: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Give Report Name

2020-03-29 00:35:01 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Name Your Report/input_Reports_form-item")): Object: 'Object Repository/ReportSetupScreen/Name Your Report/input_Reports_form-item' is clicked on

2020-03-29 00:35:01 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Name Your Report/input_Reports_form-item' is clicked on

2020-03-29 00:35:01 - [TEST_STEP][PASSED] - setText(findTestObject("ReportSetupScreen/Name Your Report/input_Reports_form-item"), ReportName): Text 'Weekly Sales' is set on object 'Object Repository/ReportSetupScreen/Name Your Report/input_Reports_form-item'

2020-03-29 00:35:02 - [MESSAGE][PASSED] - Text 'Weekly Sales' is set on object 'Object Repository/ReportSetupScreen/Name Your Report/input_Reports_form-item'

2020-03-29 00:35:02 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Give Report Name' successfully

2020-03-29 00:35:02 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Report Category"), ["ReportCategory":CategoryName], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Report Category' successfully

2020-03-29 00:35:02 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Report Category: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Report Category

2020-03-29 00:35:02 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:35:02 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Name Your Report/input_Report Name_form-item ng-untouched ng-pristine ng-invalid")): Object: 'Object Repository/ReportSetupScreen/Name Your Report/input_Report Name_form-item ng-untouched ng-pristine ng-invalid' is clicked on

2020-03-29 00:35:02 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Name Your Report/input_Report Name_form-item ng-untouched ng-pristine ng-invalid' is clicked on

2020-03-29 00:35:02 - [TEST_STEP][PASSED] - setText(findTestObject("ReportSetupScreen/Name Your Report/input_SelectCategory"), ReportCategory): Text 'Sales/Controllables' is set on object 'Object Repository/ReportSetupScreen/Name Your Report/input_SelectCategory'

2020-03-29 00:35:03 - [MESSAGE][PASSED] - Text 'Sales/Controllables' is set on object 'Object Repository/ReportSetupScreen/Name Your Report/input_SelectCategory'

2020-03-29 00:35:03 - [TEST_STEP][PASSED] - CategoryName = ReportCategory: null

2020-03-29 00:35:03 - [TEST_STEP][PASSED] - fields = driver.findElement(By.xpath("//span[text()="" + CategoryName + ""]")): null

2020-03-29 00:35:03 - [TEST_STEP][PASSED] - fields.click(): null

2020-03-29 00:35:03 - [TEST_STEP][PASSED] - delay(1): Delayed 1 second(s)

2020-03-29 00:35:04 - [MESSAGE][PASSED] - Delayed 1 second(s)

2020-03-29 00:35:04 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Report Category' successfully

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Select Data Grain And Present Data By options for Report"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Select Data Grain And Present Data By options for Report' successfully

2020-03-29 00:35:04 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Select Data Grain And Present Data By options for Report: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Select Data Grain And Present Data By options for Report

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - DataGrain = DataGrain: null

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - PresentBy = PresentBy: null

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - if (DataGrain.equalsIgnoreCase("Daily") && PresentBy.equalsIgnoreCase("Day")): null

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - else if (DataGrain.equalsIgnoreCase("Daily") && PresentBy.equalsIgnoreCase("Week")): null

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - else if (DataGrain.equalsIgnoreCase("Daily") && PresentBy.equalsIgnoreCase("Month")): null

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - else if (DataGrain.equalsIgnoreCase("Daily") && PresentBy.equalsIgnoreCase("EntireRange")): null

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - else if (DataGrain.equalsIgnoreCase("Weekly") && PresentBy.equalsIgnoreCase("Week")): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Prime Cost - Weekly Data Grain' successfully

2020-03-29 00:35:04 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Grain By Weekly with Present By Week"), ["NoOfWeeks":NoOfWeeks], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Grain By Weekly with Present By Week' successfully

2020-03-29 00:35:04 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Grain By Weekly with Present By Week: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Grain By Weekly with Present By Week

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Data Grain/button_Weekly")): Object: 'Object Repository/ReportSetupScreen/Data Grain/button_Weekly' is clicked on

2020-03-29 00:35:05 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Data Grain/button_Weekly' is clicked on

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Present Data By/button_Week")): Object: 'Object Repository/ReportSetupScreen/Present Data By/button_Week' is clicked on

2020-03-29 00:35:05 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Present Data By/button_Week' is clicked on

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - setText(findTestObject("ReportSetupScreen/Present Data By/input_Limit no of weeks_form-item ng-untouched ng-pristine ng-invalid"), NoOfWeeks): Text '13' is set on object 'Object Repository/ReportSetupScreen/Present Data By/input_Limit no of weeks_form-item ng-untouched ng-pristine ng-invalid'

2020-03-29 00:35:05 - [MESSAGE][PASSED] - Text '13' is set on object 'Object Repository/ReportSetupScreen/Present Data By/input_Limit no of weeks_form-item ng-untouched ng-pristine ng-invalid'

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - Addcolumns = driver.findElement(By.xpath("//span[text()="Add Columns"]")): null

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true)", Addcolumns): null

2020-03-29 00:35:05 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Grain By Weekly with Present By Week' successfully

2020-03-29 00:35:05 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Net Sales - Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Net Sales - Weekly Data Grain' successfully

2020-03-29 00:35:06 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Net Sales - Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Net Sales - Weekly Data Grain

2020-03-29 00:35:06 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:08 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:08 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:15 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:15 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/Net Sales(DWM)/tupple_Net_Sales")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/Net Sales(DWM)/tupple_Net_Sales' is clickable

2020-03-29 00:35:15 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/Net Sales(DWM)/tupple_Net_Sales' is clickable

2020-03-29 00:35:15 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Net Sales(DWM)/tupple_Net_Sales")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Net Sales(DWM)/tupple_Net_Sales' is clicked on

2020-03-29 00:35:15 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Net Sales(DWM)/tupple_Net_Sales' is clicked on

2020-03-29 00:35:15 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:16 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:16 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:16 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:16 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:16 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:16 - [TEST_STEP][PASSED] - delay(3, CONTINUE_ON_FAILURE): Delayed 3 second(s)

2020-03-29 00:35:19 - [MESSAGE][PASSED] - Delayed 3 second(s)

2020-03-29 00:35:19 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:19 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:19 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Net Sales - Weekly Data Grain' successfully

2020-03-29 00:35:19 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Guest Count- Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Guest Count- Weekly Data Grain' successfully

2020-03-29 00:35:19 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Guest Count- Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Guest Count- Weekly Data Grain

2020-03-29 00:35:20 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:20 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:20 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:20 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:20 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/Guest Count/Tpl_GuestCount")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/Guest Count/Tpl_GuestCount' is clickable

2020-03-29 00:35:20 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/Guest Count/Tpl_GuestCount' is clickable

2020-03-29 00:35:20 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Guest Count/Tpl_GuestCount")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Guest Count/Tpl_GuestCount' is clicked on

2020-03-29 00:35:20 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Guest Count/Tpl_GuestCount' is clicked on

2020-03-29 00:35:20 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:21 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:21 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:21 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:21 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:21 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:21 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Guest Count- Weekly Data Grain' successfully

2020-03-29 00:35:21 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Average Ticket - Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Average Ticket - Weekly Data Grain' successfully

2020-03-29 00:35:21 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Average Ticket - Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Average Ticket - Weekly Data Grain

2020-03-29 00:35:22 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:22 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:22 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:22 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:22 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/Average Check/Tpl_AvrgCheck")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/Average Check/Tpl_AvrgCheck' is clickable

2020-03-29 00:35:22 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/Average Check/Tpl_AvrgCheck' is clickable

2020-03-29 00:35:22 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Average Check/Tpl_AvrgCheck")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Average Check/Tpl_AvrgCheck' is clicked on

2020-03-29 00:35:22 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Average Check/Tpl_AvrgCheck' is clicked on

2020-03-29 00:35:22 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:23 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:23 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:23 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:23 - [TEST_STEP][NOT_RUN] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastWeek")): NOT_RUN: click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastWeek"))

2020-03-29 00:35:23 - [MESSAGE][NOT_RUN] - NOT_RUN: click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastWeek"))

2020-03-29 00:35:23 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:23 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:23 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Average Ticket - Weekly Data Grain' successfully

2020-03-29 00:35:23 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Cost-Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Cost-Weekly Data Grain' successfully

2020-03-29 00:35:23 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Cost-Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Cost-Weekly Data Grain

2020-03-29 00:35:24 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:24 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:24 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:24 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:24 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/Labor Cost/tpl_LaborCost")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Cost/tpl_LaborCost' is clickable

2020-03-29 00:35:24 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Cost/tpl_LaborCost' is clickable

2020-03-29 00:35:24 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Labor Cost/tpl_LaborCost")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Cost/tpl_LaborCost' is clicked on

2020-03-29 00:35:24 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Cost/tpl_LaborCost' is clicked on

2020-03-29 00:35:24 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:25 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:25 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:25 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:25 - [TEST_STEP][NOT_RUN] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastWeek")): NOT_RUN: click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastWeek"))

2020-03-29 00:35:25 - [MESSAGE][NOT_RUN] - NOT_RUN: click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastWeek"))

2020-03-29 00:35:25 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:25 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:25 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:26 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:26 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Cost-Weekly Data Grain' successfully

2020-03-29 00:35:26 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Gross Sales -Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Gross Sales -Weekly Data Grain' successfully

2020-03-29 00:35:26 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Gross Sales -Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Gross Sales -Weekly Data Grain

2020-03-29 00:35:26 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:26 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:26 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:27 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:27 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/Gross Sales/Tpl_Gross Sales")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/Gross Sales/Tpl_Gross Sales' is clickable

2020-03-29 00:35:27 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/Gross Sales/Tpl_Gross Sales' is clickable

2020-03-29 00:35:27 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Gross Sales/Tpl_Gross Sales")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Gross Sales/Tpl_Gross Sales' is clicked on

2020-03-29 00:35:27 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Gross Sales/Tpl_Gross Sales' is clicked on

2020-03-29 00:35:27 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:28 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:28 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:28 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:28 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:28 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:28 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Gross Sales -Weekly Data Grain' successfully

2020-03-29 00:35:28 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Hours -Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Hours -Weekly Data Grain' successfully

2020-03-29 00:35:28 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Hours -Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Hours -Weekly Data Grain

2020-03-29 00:35:28 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:29 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:29 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:29 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:29 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/Labor Hours/Tpl_Labor Hours")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Hours/Tpl_Labor Hours' is clickable

2020-03-29 00:35:29 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Hours/Tpl_Labor Hours' is clickable

2020-03-29 00:35:29 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Labor Hours/Tpl_Labor Hours")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Hours/Tpl_Labor Hours' is clicked on

2020-03-29 00:35:29 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Labor Hours/Tpl_Labor Hours' is clicked on

2020-03-29 00:35:29 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:30 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:30 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:30 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:30 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:30 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:30 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Labor Hours -Weekly Data Grain' successfully

2020-03-29 00:35:30 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/COGS - Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/COGS - Weekly Data Grain' successfully

2020-03-29 00:35:31 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/COGS - Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/COGS - Weekly Data Grain

2020-03-29 00:35:31 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:31 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:31 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:31 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:31 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/COGS/tpl_COGS")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/COGS/tpl_COGS' is clickable

2020-03-29 00:35:31 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/COGS/tpl_COGS' is clickable

2020-03-29 00:35:31 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/COGS/tpl_COGS")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/COGS/tpl_COGS' is clicked on

2020-03-29 00:35:32 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/COGS/tpl_COGS' is clicked on

2020-03-29 00:35:32 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:32 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:32 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:33 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:33 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:33 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:33 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:33 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:33 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/COGS - Weekly Data Grain' successfully

2020-03-29 00:35:33 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Prime Cost - Weekly Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Prime Cost - Weekly Data Grain' successfully

2020-03-29 00:35:33 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Prime Cost - Weekly Data Grain: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Prime Cost - Weekly Data Grain

2020-03-29 00:35:34 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/link_Add Columns")): Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:34 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/link_Add Columns' is clicked on

2020-03-29 00:35:34 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/drp_DataGroup")): Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:34 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/drp_DataGroup' is clicked on

2020-03-29 00:35:34 - [TEST_STEP][PASSED] - verifyElementClickable(findTestObject("ReportSetupScreen/DataGroupValues/Prime Cost/tpl_PrimeCost")): Object 'Object Repository/ReportSetupScreen/DataGroupValues/Prime Cost/tpl_PrimeCost' is clickable

2020-03-29 00:35:34 - [MESSAGE][PASSED] - Object 'Object Repository/ReportSetupScreen/DataGroupValues/Prime Cost/tpl_PrimeCost' is clickable

2020-03-29 00:35:34 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Prime Cost/tpl_PrimeCost")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Prime Cost/tpl_PrimeCost' is clicked on

2020-03-29 00:35:35 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Prime Cost/tpl_PrimeCost' is clicked on

2020-03-29 00:35:35 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:35 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Actual' is clicked on

2020-03-29 00:35:35 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:36 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_LastYear' is clicked on

2020-03-29 00:35:36 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget")): Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:36 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/DataGroupValues/Categories/Ctg_Budget' is clicked on

2020-03-29 00:35:36 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Create Columns/button_Add Columns(s)")): Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:36 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Create Columns/button_Add Columns(s)' is clicked on

2020-03-29 00:35:36 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Column Selection By Data Grain/Weekly Data Grain/Prime Cost - Weekly Data Grain' successfully

2020-03-29 00:35:36 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Data Grain with Present Data By/Select Data Grain And Present Data By options for Report' successfully

2020-03-29 00:35:36 - [TEST_STEP][PASSED] - ColumnListNew = []: null

2020-03-29 00:35:36 - [TEST_STEP][PASSED] - ColumnListNew = reportbuildercustom.RB_Keywords.verifyTotalAddedColumns(): reportbuildercustom.RB_Keywords.verifyTotalAddedColumns is PASSED

2020-03-29 00:35:38 - [MESSAGE][PASSED] - reportbuildercustom.RB_Keywords.verifyTotalAddedColumns is PASSED

2020-03-29 00:35:38 - [TEST_STEP][PASSED] - TotalNoOfColumnsAdded = ColumnListNew.size(): null

2020-03-29 00:35:38 - [TEST_STEP][PASSED] - println(TotalNoOfColumnsAdded): null

2020-03-29 00:35:38 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Grouping By Hierarchy"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Grouping By Hierarchy' successfully

2020-03-29 00:35:38 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Grouping By Hierarchy: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Grouping By Hierarchy

2020-03-29 00:35:39 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Grouping/By Hierarchy/btn_ByHierarchy")): Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/btn_ByHierarchy' is clicked on

2020-03-29 00:35:39 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/btn_ByHierarchy' is clicked on

2020-03-29 00:35:39 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Grouping/By Hierarchy/span_By Region")): Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_By Region' is clicked on

2020-03-29 00:35:39 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_By Region' is clicked on

2020-03-29 00:35:40 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Grouping/By Hierarchy/span_Show Region Subtotal")): Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_Show Region Subtotal' is clicked on

2020-03-29 00:35:40 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_Show Region Subtotal' is clicked on

2020-03-29 00:35:40 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Grouping/By Hierarchy/span_By District")): Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_By District' is clicked on

2020-03-29 00:35:41 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_By District' is clicked on

2020-03-29 00:35:41 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/Grouping/By Hierarchy/span_Show District Subtotal")): Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_Show District Subtotal' is clicked on

2020-03-29 00:35:41 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/Grouping/By Hierarchy/span_Show District Subtotal' is clicked on

2020-03-29 00:35:41 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Select Grouping By Hierarchy' successfully

2020-03-29 00:35:41 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Click on Create Report Button"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Click on Create Report Button' successfully

2020-03-29 00:35:41 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Click on Create Report Button: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Click on Create Report Button

2020-03-29 00:35:41 - [TEST_STEP][PASSED] - click(findTestObject("ReportSetupScreen/button_Create report")): Object: 'Object Repository/ReportSetupScreen/button_Create report' is clicked on

2020-03-29 00:35:42 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportSetupScreen/button_Create report' is clicked on

2020-03-29 00:35:42 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Click on Create Report Button' successfully

2020-03-29 00:35:42 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Search and validate created report from list of reports"), ["SearchCategory":CategoryName, "SearchReport":ReportName], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Search and validate created report from list of reports' successfully

2020-03-29 00:35:42 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Search and validate created report from list of reports: Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Search and validate created report from list of reports

2020-03-29 00:35:42 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 5): Object 'Object Repository/Page_Restaurant Intranet/Setup/tasterMessage' is visible

2020-03-29 00:35:42 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Setup/tasterMessage' is visible

2020-03-29 00:35:42 - [TEST_STEP][PASSED] - waitForElementNotVisible(findTestObject("Page_Restaurant Intranet/Setup/tasterMessage"), 5): Object 'Object Repository/Page_Restaurant Intranet/Setup/tasterMessage' is NOT visible

2020-03-29 00:35:48 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Setup/tasterMessage' is NOT visible

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - refresh(): NOT_RUN: refresh()

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: refresh()

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - waitForElementClickable(findTestObject("ReportSetupScreen/input_SearchReportFilter"), 20): NOT_RUN: waitForElementClickable(findTestObject("ReportSetupScreen/input_SearchReportFilter"), 20)

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: waitForElementClickable(findTestObject("ReportSetupScreen/input_SearchReportFilter"), 20)

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - click(findTestObject("ReportSetupScreen/input_SearchReportFilter")): NOT_RUN: click(findTestObject("ReportSetupScreen/input_SearchReportFilter"))

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: click(findTestObject("ReportSetupScreen/input_SearchReportFilter"))

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - reportName = SearchReport: NOT_RUN: reportName = SearchReport

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: reportName = SearchReport

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - setText(findTestObject("ReportSetupScreen/input_SearchReportFilter"), reportName): NOT_RUN: setText(findTestObject("ReportSetupScreen/input_SearchReportFilter"), reportName)

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: setText(findTestObject("ReportSetupScreen/input_SearchReportFilter"), reportName)

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - click(findTestObject("ReportSetupScreen/Reports_header")): NOT_RUN: click(findTestObject("ReportSetupScreen/Reports_header"))

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: click(findTestObject("ReportSetupScreen/Reports_header"))

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - delay(2): NOT_RUN: delay(2)

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: delay(2)

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - click(findTestObject("ReportSetupScreen/tabel_SearchedReport")): NOT_RUN: click(findTestObject("ReportSetupScreen/tabel_SearchedReport"))

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: click(findTestObject("ReportSetupScreen/tabel_SearchedReport"))

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - strReportName = getText(findTestObject("ReportSetupScreen/tabel_SearchedReport")): NOT_RUN: strReportName = getText(findTestObject("ReportSetupScreen/tabel_SearchedReport"))

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: strReportName = getText(findTestObject("ReportSetupScreen/tabel_SearchedReport"))

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - if (strReportName.equalsIgnoreCase(reportName)): NOT_RUN: if (strReportName.equalsIgnoreCase(reportName))

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: if (strReportName.equalsIgnoreCase(reportName))

2020-03-29 00:35:48 - [TEST_STEP][NOT_RUN] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"), 0): NOT_RUN: waitForElementClickable(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"), 0)

2020-03-29 00:35:48 - [MESSAGE][NOT_RUN] - NOT_RUN: waitForElementClickable(findTestObject("Page_Restaurant Intranet/link_ProfileIcon"), 0)

2020-03-29 00:35:48 - [TEST_STEP][PASSED] - delay(3): Delayed 3 second(s)

2020-03-29 00:35:51 - [MESSAGE][PASSED] - Delayed 3 second(s)

2020-03-29 00:35:51 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CrossLocationReportBuilderSetup_Page/Search and validate created report from list of reports' successfully

2020-03-29 00:35:51 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on Dashboard Link"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on Dashboard Link' successfully

2020-03-29 00:35:51 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on Dashboard Link: Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on Dashboard Link

2020-03-29 00:35:51 - [TEST_STEP][PASSED] - mouseOver(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon")): Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon' is hovered

2020-03-29 00:35:51 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon' is hovered

2020-03-29 00:35:51 - [TEST_STEP][PASSED] - delay(2): Delayed 2 second(s)

2020-03-29 00:35:53 - [MESSAGE][PASSED] - Delayed 2 second(s)

2020-03-29 00:35:53 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar"), ExplicitWait): Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar' is clickable

2020-03-29 00:35:53 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar' is clickable

2020-03-29 00:35:53 - [TEST_STEP][NOT_RUN] - verifyElementPresent(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar"), 0): NOT_RUN: verifyElementPresent(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar"), 0)

2020-03-29 00:35:53 - [MESSAGE][NOT_RUN] - NOT_RUN: verifyElementPresent(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar"), 0)

2020-03-29 00:35:53 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar")): Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar' is clicked on

2020-03-29 00:35:53 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_Calendar' is clicked on

2020-03-29 00:35:53 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:35:53 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:35:53 - [TEST_STEP][PASSED] - waitForElementNotVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:35:58 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:35:58 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on Dashboard Link' successfully

2020-03-29 00:35:58 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Select PC name"), ["PCName":PCName], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Select PC name' successfully

2020-03-29 00:35:58 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Select PC name: Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Select PC name

2020-03-29 00:35:59 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/drp_PC_Name")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_PC_Name' is clicked on

2020-03-29 00:35:59 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_PC_Name' is clicked on

2020-03-29 00:35:59 - [TEST_STEP][PASSED] - setText(findTestObject("Page_Restaurant Intranet/Dashboard/drp_PC_Name"), PCName): Text 'Union Ave' is set on object 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_PC_Name'

2020-03-29 00:35:59 - [MESSAGE][PASSED] - Text 'Union Ave' is set on object 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_PC_Name'

2020-03-29 00:35:59 - [TEST_STEP][PASSED] - sendKeys(findTestObject("Page_Restaurant Intranet/Dashboard/drp_PC_Name"), Keys.chord(ENTER)): Keys 'ENTER + ' sent to object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_PC_Name'

2020-03-29 00:36:00 - [MESSAGE][PASSED] - Keys 'ENTER + ' sent to object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_PC_Name'

2020-03-29 00:36:00 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:00 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:00 - [TEST_STEP][PASSED] - waitForElementNotVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:04 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:04 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Select PC name' successfully

2020-03-29 00:36:04 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on dashbord calender button and select operational calender"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on dashbord calender button and select operational calender' successfully

2020-03-29 00:36:04 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on dashbord calender button and select operational calender: Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on dashbord calender button and select operational calender

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_DashboardCalender")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_DashboardCalender' is clicked on

2020-03-29 00:36:05 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_DashboardCalender' is clicked on

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - OC1 = OperationalCalender: null

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - OY1 = SalesBudgetYear: null

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/drp_YearPeriod")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_YearPeriod' is clicked on

2020-03-29 00:36:05 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_YearPeriod' is clicked on

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - yearfiled = driver.findElement(By.xpath("//option[contains(text(),"" + OY1 + "")]")): null

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - yearfiled.click(): null

2020-03-29 00:36:05 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 50): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:06 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:06 - [TEST_STEP][PASSED] - waitForElementNotVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 50): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:11 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:11 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/drp_calender")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_calender' is clicked on

2020-03-29 00:36:11 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/drp_calender' is clicked on

2020-03-29 00:36:11 - [TEST_STEP][PASSED] - fields = driver.findElement(By.xpath("//option[contains(text(),"" + OC1 + "")]")): null

2020-03-29 00:36:11 - [TEST_STEP][PASSED] - fields.click(): null

2020-03-29 00:36:11 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 50): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:11 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:11 - [TEST_STEP][PASSED] - waitForElementNotVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 50): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:16 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:16 - [TEST_STEP][PASSED] - if (xpath("//div[@class='popover__cross']")).isDisplayed()): null

2020-03-29 00:36:16 - [TEST_STEP][PASSED] - markPassed("Clicking on Dates of dashbord calender"): Clicking on Dates of dashbord calender

2020-03-29 00:36:16 - [MESSAGE][PASSED] - Clicking on Dates of dashbord calender

2020-03-29 00:36:16 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Click on dashbord calender button and select operational calender' successfully

2020-03-29 00:36:16 - [TEST_STEP][PASSED] - valuesFromCalendarDashboard = [:]: null

2020-03-29 00:36:16 - [TEST_STEP][PASSED] - valuesFromCalendarDashboard = callTestCase(findTestCase("ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Get all available variable values from calender view for all weeks of one month"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Get all available variable values from calender view for all weeks of one month' successfully

2020-03-29 00:36:16 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Get all available variable values from calender view for all weeks of one month: Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Get all available variable values from calender view for all weeks of one month

2020-03-29 00:36:17 - [TEST_STEP][PASSED] - delay(2): Delayed 2 second(s)

2020-03-29 00:36:19 - [MESSAGE][PASSED] - Delayed 2 second(s)

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - NetSales = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - NetSalesLastYear = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - BudgetedSales = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - COGS = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - COGSLastYear = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - COGSBudget = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - PrimeCost = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - PrimeCostLastYear = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - PrimeCostBudget = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - Labor = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - LaborLastYear = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - LaborBudget = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - AllVariables = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - DateAndValueFromCal = [:]: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - DayWiseDate = []: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - CalendarDates = []: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - DailyDate = null: null

2020-03-29 00:36:19 - [TEST_STEP][PASSED] - delay(3): Delayed 3 second(s)

2020-03-29 00:36:22 - [MESSAGE][PASSED] - Delayed 3 second(s)

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Wrappers = driver.findElement(By.xpath("//div[@class='calendar-wrap dbschema_wraper']")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Calenderrow = Wrappers.findElements(By.xpath("((//div[contains(@class,"calendar-row calendar-row--charts")]))")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - NoOfcalenderRows = Calenderrow.size(): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - println("No of calender rows are" + NoOfcalenderRows): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - for ([l = 0, l < NoOfcalenderRows, (l++)]): EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + NOV 17 TO NOV 23+ is completed successfully....

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - count = l + 2: null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Row = driver.findElement(By.xpath("/html/body/app-root/app-homelayout/body/div/app-home/div[2]/div/div[" + count + "]/div[3]/div")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - println("No of  rows " + l): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - if (l >= 1): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - else: null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Row.click(): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - DateOnCalendar = getText(findTestObject("Page_Restaurant Intranet/Dashboard/div_DailyDateHeader")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 44 - OCT 27 TO NOV 2'

2020-03-29 00:36:22 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 44 - OCT 27 TO NOV 2'

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - CalendarDates = DateOnCalendar.split("-"): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - DailyDates = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - DayWiseDate.add(l, DailyDates): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - FirstCharacter = DailyDates.charAt(0): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - if (DailyDates.length() == 1): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - else: null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - DailyDate = DailyDates: null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - HeaderOftabel = ["Total"]: null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - HeaderRow = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/thead")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Headers = HeaderRow.findElements(By.tagName("th")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - println(Headers.size()): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - for ([i = 1, i < Headers.size() - 1, (i++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - if (HeaderOftabel.contains(HeaderName)): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Tabel = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Rows = Tabel.findElements(By.tagName("tr")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - for ([j = 0, j < Rows.size(), (j++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:22 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:22 - [TEST_STEP][PASSED] - NetSalesTY = get(index).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(NetSalesTY): $7,913.43

2020-03-29 00:36:23 - [MESSAGE][INFO] - $7,913.43

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - println(NetSalesTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - NetSales.put(DailyDate, NetSalesTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesValues", NetSales): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - NetSalesLYData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - NetSalesLY = get(0).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(NetSalesLY): $0.00

2020-03-29 00:36:23 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - println(NetSalesLY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - NetSalesLastYear.put(DailyDate, NetSalesLY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesLastYearValues", NetSalesLastYear): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS TY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [MESSAGE][INFO] - FETCHING COGS TY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - COGSdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - COGSdata2 = COGSdata.get(0): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - COGSTY = COGSdata2.getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(COGSTY): 0.00%

2020-03-29 00:36:23 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - println(COGSTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - COGS.put(DailyDate, COGSTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("COGSValues", COGS): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS LY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [MESSAGE][INFO] - FETCHING COGS LY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - COGSdataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - COGSLY = get(0).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:23 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:23 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - println(COGSLY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - COGSLastYear.put(DailyDate, COGSLY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("COGSLastYearValues", COGSLastYear): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR COST TY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [MESSAGE][INFO] - FETCHING LABOR COST TY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - println(index): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - Labordata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - Labordata2 = Labordata.get(1): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - LaborCostTY = Labordata2.getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(LaborCostTY): $0.00

2020-03-29 00:36:23 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - println(LaborCostTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - Labor.put(DailyDate, LaborCostTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("LaborThisYear", Labor): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR LY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [MESSAGE][INFO] - FETCHING LABOR LY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - LabordataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - LaborCostLY = get(0).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(LaborCostLY): $0.00

2020-03-29 00:36:23 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - LaborLastYear.put(DailyDate, LaborCostLY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("LaborLastYear", LaborLastYear): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("PRIME COST")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST TY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [MESSAGE][INFO] - FETCHING PRIME COST TY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - PrimeCostdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - PrimeCostdata2 = PrimeCostdata.get(0): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - PrimeCostTY = PrimeCostdata2.getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(PrimeCostTY): 0.00%

2020-03-29 00:36:23 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - println(PrimeCostTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - PrimeCost.put(DailyDate, PrimeCostTY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostValues", PrimeCost): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST LY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [MESSAGE][INFO] - FETCHING PRIME COST LY FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - PrimeCostLYData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - PrimeCostLY = get(0).getText(): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - comment(PrimeCostLY): 0.00%

2020-03-29 00:36:23 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - PrimeCostLastYear.put(DailyDate, PrimeCostLY): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostLastYearValues", PrimeCostLastYear): null

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - currentComparisionWith = getText(findTestObject("Page_Restaurant Intranet/Dashboard/span_Last Year")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:23 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - if (currentComparisionWith.equalsIgnoreCase("Last Year")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - logInfo("NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD"): NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:23 - [MESSAGE][INFO] - NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:23 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:23 - [TEST_STEP][PASSED] - Tabe2 = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - Rows2 = Tabe2.findElements(By.tagName("tr")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - for ([k = 0, k < Rows2.size(), (k++)]): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [MESSAGE][INFO] - FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - NetSalesBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - NetSalesBudgeted = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - comment(NetSalesBudgeted): $0.00

2020-03-29 00:36:24 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - println(NetSalesBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - BudgetedSales.put(DailyDate, NetSalesBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - AllVariables.put("BudgetedSalesValues", BudgetedSales): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [MESSAGE][INFO] - FETCHING COGS BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - COGSBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - COGSBudgeted = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - comment(COGSBudgeted): 10.00%

2020-03-29 00:36:24 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - println(COGSBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - COGSBudget.put(DailyDate, COGSBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - AllVariables.put("COGSBudgetValues", COGSBudget): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [MESSAGE][INFO] - FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - LABORBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - LABORBudgeted = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - comment(LABORBudgeted): $0.00

2020-03-29 00:36:24 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - println(LABORBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - LaborBudget.put(DailyDate, LABORBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - AllVariables.put("LABORBudgetValues", LaborBudget): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("PRIME COST")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [MESSAGE][INFO] - FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - PrimeCostBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - PrimeCostBudgeted = get(0).getText(): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - comment(PrimeCostBudgeted): 10.00%

2020-03-29 00:36:24 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - println(PrimeCostBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - PrimeCostBudget.put(DailyDate, PrimeCostBudgeted): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostBudgetValues", PrimeCostBudget): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:24 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), 10): Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:24 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), CONTINUE_ON_FAILURE): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:24 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  +" + DailyDate + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + OCT 27 TO NOV 2+ is completed successfully....

2020-03-29 00:36:24 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + OCT 27 TO NOV 2+ is completed successfully....

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - count = l + 2: null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - Row = driver.findElement(By.xpath("/html/body/app-root/app-homelayout/body/div/app-home/div[2]/div/div[" + count + "]/div[3]/div")): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - println("No of  rows " + l): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - if (l >= 1): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", Row): null

2020-03-29 00:36:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].click();", Row): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - DateOnCalendar = getText(findTestObject("Page_Restaurant Intranet/Dashboard/div_DailyDateHeader")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 45 - NOV 3 TO NOV 9'

2020-03-29 00:36:25 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 45 - NOV 3 TO NOV 9'

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - CalendarDates = DateOnCalendar.split("-"): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - DailyDates = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - DayWiseDate.add(l, DailyDates): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - FirstCharacter = DailyDates.charAt(0): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - if (DailyDates.length() == 1): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - else: null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - DailyDate = DailyDates: null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - HeaderOftabel = ["Total"]: null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - HeaderRow = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/thead")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Headers = HeaderRow.findElements(By.tagName("th")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(Headers.size()): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - for ([i = 1, i < Headers.size() - 1, (i++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - if (HeaderOftabel.contains(HeaderName)): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Tabel = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Rows = Tabel.findElements(By.tagName("tr")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - for ([j = 0, j < Rows.size(), (j++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - NetSalesTY = get(index).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(NetSalesTY): $21,258.15

2020-03-29 00:36:25 - [MESSAGE][INFO] - $21,258.15

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(NetSalesTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - NetSales.put(DailyDate, NetSalesTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesValues", NetSales): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - NetSalesLYData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - NetSalesLY = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(NetSalesLY): $0.00

2020-03-29 00:36:25 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(NetSalesLY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - NetSalesLastYear.put(DailyDate, NetSalesLY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesLastYearValues", NetSalesLastYear): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS TY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING COGS TY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - COGSdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - COGSdata2 = COGSdata.get(0): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - COGSTY = COGSdata2.getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(COGSTY): 0.00%

2020-03-29 00:36:25 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(COGSTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - COGS.put(DailyDate, COGSTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("COGSValues", COGS): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS LY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING COGS LY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - COGSdataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - COGSLY = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:25 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:25 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(COGSLY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - COGSLastYear.put(DailyDate, COGSLY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("COGSLastYearValues", COGSLastYear): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR COST TY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING LABOR COST TY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(index): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Labordata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Labordata2 = Labordata.get(1): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - LaborCostTY = Labordata2.getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(LaborCostTY): $0.00

2020-03-29 00:36:25 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(LaborCostTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Labor.put(DailyDate, LaborCostTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("LaborThisYear", Labor): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR LY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING LABOR LY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - LabordataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - LaborCostLY = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(LaborCostLY): $0.00

2020-03-29 00:36:25 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - LaborLastYear.put(DailyDate, LaborCostLY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("LaborLastYear", LaborLastYear): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("PRIME COST")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST TY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING PRIME COST TY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - PrimeCostdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - PrimeCostdata2 = PrimeCostdata.get(0): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - PrimeCostTY = PrimeCostdata2.getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(PrimeCostTY): 0.00%

2020-03-29 00:36:25 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - println(PrimeCostTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - PrimeCost.put(DailyDate, PrimeCostTY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostValues", PrimeCost): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST LY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [MESSAGE][INFO] - FETCHING PRIME COST LY FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - PrimeCostLYData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - PrimeCostLY = get(0).getText(): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - comment(PrimeCostLY): 0.00%

2020-03-29 00:36:25 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - PrimeCostLastYear.put(DailyDate, PrimeCostLY): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostLastYearValues", PrimeCostLastYear): null

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - currentComparisionWith = getText(findTestObject("Page_Restaurant Intranet/Dashboard/span_Last Year")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:25 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - if (currentComparisionWith.equalsIgnoreCase("Last Year")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - logInfo("NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD"): NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:25 - [MESSAGE][INFO] - NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:25 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:25 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - Tabe2 = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - Rows2 = Tabe2.findElements(By.tagName("tr")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - for ([k = 0, k < Rows2.size(), (k++)]): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [MESSAGE][INFO] - FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - NetSalesBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - NetSalesBudgeted = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - comment(NetSalesBudgeted): $0.00

2020-03-29 00:36:26 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - println(NetSalesBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - BudgetedSales.put(DailyDate, NetSalesBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - AllVariables.put("BudgetedSalesValues", BudgetedSales): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [MESSAGE][INFO] - FETCHING COGS BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - COGSBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - COGSBudgeted = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - comment(COGSBudgeted): 10.00%

2020-03-29 00:36:26 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - println(COGSBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - COGSBudget.put(DailyDate, COGSBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - AllVariables.put("COGSBudgetValues", COGSBudget): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [MESSAGE][INFO] - FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - LABORBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - LABORBudgeted = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - comment(LABORBudgeted): $0.00

2020-03-29 00:36:26 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - println(LABORBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - LaborBudget.put(DailyDate, LABORBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - AllVariables.put("LABORBudgetValues", LaborBudget): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("PRIME COST")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [MESSAGE][INFO] - FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - PrimeCostBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - PrimeCostBudgeted = get(0).getText(): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - comment(PrimeCostBudgeted): 10.00%

2020-03-29 00:36:26 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - println(PrimeCostBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - PrimeCostBudget.put(DailyDate, PrimeCostBudgeted): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostBudgetValues", PrimeCostBudget): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:26 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), 10): Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:26 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), CONTINUE_ON_FAILURE): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:26 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  +" + DailyDate + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + NOV 3 TO NOV 9+ is completed successfully....

2020-03-29 00:36:26 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + NOV 3 TO NOV 9+ is completed successfully....

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - count = l + 2: null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - Row = driver.findElement(By.xpath("/html/body/app-root/app-homelayout/body/div/app-home/div[2]/div/div[" + count + "]/div[3]/div")): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - println("No of  rows " + l): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - if (l >= 1): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", Row): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].click();", Row): null

2020-03-29 00:36:26 - [TEST_STEP][PASSED] - DateOnCalendar = getText(findTestObject("Page_Restaurant Intranet/Dashboard/div_DailyDateHeader")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 46 - NOV 10 TO NOV 16'

2020-03-29 00:36:27 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 46 - NOV 10 TO NOV 16'

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - CalendarDates = DateOnCalendar.split("-"): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - DailyDates = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - DayWiseDate.add(l, DailyDates): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - FirstCharacter = DailyDates.charAt(0): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - if (DailyDates.length() == 1): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - else: null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - DailyDate = DailyDates: null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - HeaderOftabel = ["Total"]: null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - HeaderRow = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/thead")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Headers = HeaderRow.findElements(By.tagName("th")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(Headers.size()): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - for ([i = 1, i < Headers.size() - 1, (i++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - if (HeaderOftabel.contains(HeaderName)): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Tabel = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Rows = Tabel.findElements(By.tagName("tr")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - for ([j = 0, j < Rows.size(), (j++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - NetSalesTY = get(index).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(NetSalesTY): $26,794.47

2020-03-29 00:36:27 - [MESSAGE][INFO] - $26,794.47

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(NetSalesTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - NetSales.put(DailyDate, NetSalesTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesValues", NetSales): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - NetSalesLYData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - NetSalesLY = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(NetSalesLY): $0.00

2020-03-29 00:36:27 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(NetSalesLY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - NetSalesLastYear.put(DailyDate, NetSalesLY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesLastYearValues", NetSalesLastYear): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS TY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING COGS TY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - COGSdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - COGSdata2 = COGSdata.get(0): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - COGSTY = COGSdata2.getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(COGSTY): 0.00%

2020-03-29 00:36:27 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(COGSTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - COGS.put(DailyDate, COGSTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("COGSValues", COGS): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS LY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING COGS LY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - COGSdataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - COGSLY = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:27 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:27 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(COGSLY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - COGSLastYear.put(DailyDate, COGSLY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("COGSLastYearValues", COGSLastYear): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR COST TY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING LABOR COST TY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(index): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Labordata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Labordata2 = Labordata.get(1): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - LaborCostTY = Labordata2.getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(LaborCostTY): $0.00

2020-03-29 00:36:27 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(LaborCostTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Labor.put(DailyDate, LaborCostTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("LaborThisYear", Labor): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR LY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING LABOR LY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - LabordataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - LaborCostLY = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(LaborCostLY): $0.00

2020-03-29 00:36:27 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - LaborLastYear.put(DailyDate, LaborCostLY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("LaborLastYear", LaborLastYear): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("PRIME COST")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST TY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING PRIME COST TY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - PrimeCostdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - PrimeCostdata2 = PrimeCostdata.get(0): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - PrimeCostTY = PrimeCostdata2.getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(PrimeCostTY): 0.00%

2020-03-29 00:36:27 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - println(PrimeCostTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - PrimeCost.put(DailyDate, PrimeCostTY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostValues", PrimeCost): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST LY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [MESSAGE][INFO] - FETCHING PRIME COST LY FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - PrimeCostLYData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - PrimeCostLY = get(0).getText(): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - comment(PrimeCostLY): 0.00%

2020-03-29 00:36:27 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - PrimeCostLastYear.put(DailyDate, PrimeCostLY): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostLastYearValues", PrimeCostLastYear): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - currentComparisionWith = getText(findTestObject("Page_Restaurant Intranet/Dashboard/span_Last Year")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:27 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - if (currentComparisionWith.equalsIgnoreCase("Last Year")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - logInfo("NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD"): NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:27 - [MESSAGE][INFO] - NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:27 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Tabe2 = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - Rows2 = Tabe2.findElements(By.tagName("tr")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - for ([k = 0, k < Rows2.size(), (k++)]): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:27 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [MESSAGE][INFO] - FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - NetSalesBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - NetSalesBudgeted = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - comment(NetSalesBudgeted): $0.00

2020-03-29 00:36:28 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - println(NetSalesBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - BudgetedSales.put(DailyDate, NetSalesBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - AllVariables.put("BudgetedSalesValues", BudgetedSales): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [MESSAGE][INFO] - FETCHING COGS BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - COGSBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - COGSBudgeted = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - comment(COGSBudgeted): 10.00%

2020-03-29 00:36:28 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - println(COGSBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - COGSBudget.put(DailyDate, COGSBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - AllVariables.put("COGSBudgetValues", COGSBudget): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [MESSAGE][INFO] - FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - LABORBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - LABORBudgeted = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - comment(LABORBudgeted): $0.00

2020-03-29 00:36:28 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - println(LABORBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - LaborBudget.put(DailyDate, LABORBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - AllVariables.put("LABORBudgetValues", LaborBudget): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("PRIME COST")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [MESSAGE][INFO] - FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - PrimeCostBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - PrimeCostBudgeted = get(0).getText(): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - comment(PrimeCostBudgeted): 10.00%

2020-03-29 00:36:28 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - println(PrimeCostBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - PrimeCostBudget.put(DailyDate, PrimeCostBudgeted): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostBudgetValues", PrimeCostBudget): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:28 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), 10): Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:28 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), CONTINUE_ON_FAILURE): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:28 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  +" + DailyDate + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + NOV 10 TO NOV 16+ is completed successfully....

2020-03-29 00:36:28 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + NOV 10 TO NOV 16+ is completed successfully....

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - count = l + 2: null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - Row = driver.findElement(By.xpath("/html/body/app-root/app-homelayout/body/div/app-home/div[2]/div/div[" + count + "]/div[3]/div")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - println("No of  rows " + l): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - if (l >= 1): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", Row): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].click();", Row): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - DateOnCalendar = getText(findTestObject("Page_Restaurant Intranet/Dashboard/div_DailyDateHeader")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 47 - NOV 17 TO NOV 23'

2020-03-29 00:36:28 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/div_DailyDateHeader' is: 'WEEK 47 - NOV 17 TO NOV 23'

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - CalendarDates = DateOnCalendar.split("-"): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - DailyDates = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - DayWiseDate.add(l, DailyDates): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - FirstCharacter = DailyDates.charAt(0): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - if (DailyDates.length() == 1): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - else: null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - DailyDate = DailyDates: null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - HeaderOftabel = ["Total"]: null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - HeaderRow = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/thead")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - Headers = HeaderRow.findElements(By.tagName("th")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - println(Headers.size()): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - for ([i = 1, i < Headers.size() - 1, (i++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - if (HeaderOftabel.contains(HeaderName)): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - Tabel = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - Rows = Tabel.findElements(By.tagName("tr")): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - for ([j = 0, j < Rows.size(), (j++)]): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:28 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - NetSalesTY = get(index).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(NetSalesTY): $18,639.38

2020-03-29 00:36:29 - [MESSAGE][INFO] - $18,639.38

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(NetSalesTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - NetSales.put(DailyDate, NetSalesTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesValues", NetSales): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - NetSalesLYData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - NetSalesLY = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(NetSalesLY): $0.00

2020-03-29 00:36:29 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(NetSalesLY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - NetSalesLastYear.put(DailyDate, NetSalesLY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("NetSalesLastYearValues", NetSalesLastYear): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS TY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING COGS TY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSdata2 = COGSdata.get(0): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSTY = COGSdata2.getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(COGSTY): 0.00%

2020-03-29 00:36:29 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(COGSTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGS.put(DailyDate, COGSTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("COGSValues", COGS): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS LY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING COGS LY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSdataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSLY = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:29 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(COGSLY): 0.00%

2020-03-29 00:36:29 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(COGSLY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSLastYear.put(DailyDate, COGSLY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("COGSLastYearValues", COGSLastYear): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR COST TY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING LABOR COST TY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(index): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Labordata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Labordata2 = Labordata.get(1): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - LaborCostTY = Labordata2.getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(LaborCostTY): $0.00

2020-03-29 00:36:29 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(LaborCostTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Labor.put(DailyDate, LaborCostTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("LaborThisYear", Labor): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR LY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING LABOR LY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - LabordataLY = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - LaborCostLY = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(LaborCostLY): $0.00

2020-03-29 00:36:29 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - LaborLastYear.put(DailyDate, LaborCostLY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("LaborLastYear", LaborLastYear): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - if (Variablename.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - else if (Variablename.equalsIgnoreCase("PRIME COST")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST TY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST TY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING PRIME COST TY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - PrimeCostdata = get(index).findElements(By.tagName("p")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - PrimeCostdata2 = PrimeCostdata.get(0): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - PrimeCostTY = PrimeCostdata2.getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(PrimeCostTY): 0.00%

2020-03-29 00:36:29 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(PrimeCostTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - PrimeCost.put(DailyDate, PrimeCostTY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostValues", PrimeCost): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST LY FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST LY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING PRIME COST LY FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - PrimeCostLYData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - PrimeCostLY = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(PrimeCostLY): 0.00%

2020-03-29 00:36:29 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - PrimeCostLastYear.put(DailyDate, PrimeCostLY): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostLastYearValues", PrimeCostLastYear): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - currentComparisionWith = getText(findTestObject("Page_Restaurant Intranet/Dashboard/span_Last Year")): Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:29 - [MESSAGE][PASSED] - Text of object 'Object Repository/Page_Restaurant Intranet/Dashboard/span_Last Year' is: 'Last Year'

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - if (currentComparisionWith.equalsIgnoreCase("Last Year")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD"): NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:29 - [MESSAGE][INFO] - NOW FETCHING VARIABLE DATA FOR BUDGET FOR SAME PERIOD

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:29 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Tabe2 = driver.findElement(By.xpath("//*[@id="mdl-dailyActuals"]/div/div/div[2]/div/div[1]/div/div/table/tbody")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - Rows2 = Tabe2.findElements(By.tagName("tr")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - for ([k = 0, k < Rows2.size(), (k++)]): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING NET SALES BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - NetSalesBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - NetSalesBudgeted = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(NetSalesBudgeted): $0.00

2020-03-29 00:36:29 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(NetSalesBudgeted): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - BudgetedSales.put(DailyDate, NetSalesBudgeted): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("BudgetedSalesValues", BudgetedSales): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING COGS BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [MESSAGE][INFO] - FETCHING COGS BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSBudgetedData = get(index + 1).findElements(By.tagName("span")): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSBudgeted = get(0).getText(): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - comment(COGSBudgeted): 10.00%

2020-03-29 00:36:29 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - println(COGSBudgeted): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - COGSBudget.put(DailyDate, COGSBudgeted): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - AllVariables.put("COGSBudgetValues", COGSBudget): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:29 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:30 - [MESSAGE][INFO] - FETCHING LABOR BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - LABORBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - LABORBudgeted = get(0).getText(): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - comment(LABORBudgeted): $0.00

2020-03-29 00:36:30 - [MESSAGE][INFO] - $0.00

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - println(LABORBudgeted): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - LaborBudget.put(DailyDate, LABORBudgeted): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - AllVariables.put("LABORBudgetValues", LaborBudget): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - VariableRowBudget = Rows2.get(k): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - cellsBudget = VariableRowBudget.findElements(By.tagName("td")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - VariablenameBudget = get(0).getText(): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - if (VariablenameBudget.equalsIgnoreCase("SALES")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("COGS")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("LABOR")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - else if (VariablenameBudget.equalsIgnoreCase("PRIME COST")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - logInfo("FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE:" + DailyDate): FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:30 - [MESSAGE][INFO] - FETCHING PRIME COST BUDGET FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - PrimeCostBudgetedData = get(index + 1).findElements(By.tagName("div")): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - PrimeCostBudgeted = get(0).getText(): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - comment(PrimeCostBudgeted): 10.00%

2020-03-29 00:36:30 - [MESSAGE][INFO] - 10.00%

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - println(PrimeCostBudgeted): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - PrimeCostBudget.put(DailyDate, PrimeCostBudgeted): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - AllVariables.put("PrimeCostBudgetValues", PrimeCostBudget): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_toChangeBudget")): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:30 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_toChangeBudget' is clicked on

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), 10): Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:30 - [MESSAGE][PASSED] - Object 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clickable

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - click(findTestObject("Page_Restaurant Intranet/Dashboard/btn_closePopUp"), CONTINUE_ON_FAILURE): Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:30 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Dashboard/btn_closePopUp' is clicked on

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  +" + DailyDate + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + NOV 17 TO NOV 23+ is completed successfully....

2020-03-29 00:36:30 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM CALENDAR DASHBOARD FOR DATE  + NOV 17 TO NOV 23+ is completed successfully....

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - println(AllVariables.size()): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - valueFromCal = [:]: null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - valueFromCal = AllVariables.get("NetSalesValues"): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - println(valueFromCal.size()): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - DateAndValueFromCal.put("VariableValues", AllVariables): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - DateAndValueFromCal.put("CalandarValues", DayWiseDate): null

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - return DateAndValueFromCal: null

2020-03-29 00:36:30 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Get all available variable values from calender view for all weeks of one month' successfully

2020-03-29 00:36:30 - [TEST_STEP][PASSED] - callTestCase(findTestCase("CrossLocationReportBuilder_TestCases/TC77_Verify Created Report is displaying same as per the set configuration in report setup"), ["ReportName":ReportName], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/CrossLocationReportBuilder_TestCases/TC77_Verify Created Report is displaying same as per the set configuration in report setup' successfully

2020-03-29 00:36:30 - [TEST_CASE][PASSED] - Test Cases/CrossLocationReportBuilder_TestCases/TC77_Verify Created Report is displaying same as per the set configuration in report setup: Test Cases/CrossLocationReportBuilder_TestCases/TC77_Verify Created Report is displaying same as per the set configuration in report setup

2020-03-29 00:36:31 - [TEST_STEP][PASSED] - refresh(): Refresh successfully

2020-03-29 00:36:40 - [MESSAGE][PASSED] - Refresh successfully

2020-03-29 00:36:40 - [TEST_STEP][PASSED] - mouseOver(findTestObject("Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon")): Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon' is hovered

2020-03-29 00:36:40 - [MESSAGE][PASSED] - Object: 'Object Repository/Page_Restaurant Intranet/Left_Nav_Bar/link_CrossLocationReportIcon' is hovered

2020-03-29 00:36:40 - [TEST_STEP][PASSED] - reportbuildercustom.RB_Keywords.clickOnReportCategory(CategoryName): reportbuildercustom.RB_Keywords.clickOnReportCategory is PASSED

2020-03-29 00:36:45 - [MESSAGE][PASSED] - Object 'CreatedColumns' is visible

2020-03-29 00:36:45 - [MESSAGE][PASSED] - Object 'CreatedColumns' is visible

2020-03-29 00:36:45 - [MESSAGE][PASSED] - Object: 'CreatedColumns' is clicked on

2020-03-29 00:36:45 - [MESSAGE][PASSED] - reportbuildercustom.RB_Keywords.clickOnReportCategory is PASSED

2020-03-29 00:36:45 - [TEST_STEP][PASSED] - reportbuildercustom.RB_Keywords.clickAndVerifyCreatedReport(ReportName): reportbuildercustom.RB_Keywords.clickAndVerifyCreatedReport is PASSED

2020-03-29 00:36:45 - [MESSAGE][PASSED] - Object 'CreatedColumns' is visible

2020-03-29 00:36:45 - [MESSAGE][PASSED] - Object 'CreatedColumns' is visible

2020-03-29 00:36:45 - [MESSAGE][PASSED] - Object: 'CreatedColumns' is clicked on

2020-03-29 00:36:45 - [MESSAGE][PASSED] - reportbuildercustom.RB_Keywords.clickAndVerifyCreatedReport is PASSED

2020-03-29 00:36:45 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:45 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:45 - [TEST_STEP][PASSED] - waitForElementNotVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:46 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:36:46 - [TEST_STEP][PASSED] - title = getText(findTestObject("Created Reports Objects/ReportTitle"), CONTINUE_ON_FAILURE): Text of object 'Object Repository/Created Reports Objects/ReportTitle' is: 'Weekly Sales'

2020-03-29 00:36:46 - [MESSAGE][PASSED] - Text of object 'Object Repository/Created Reports Objects/ReportTitle' is: 'Weekly Sales'

2020-03-29 00:36:46 - [TEST_STEP][PASSED] - if (title.equalsIgnoreCase(ReportName)): null

2020-03-29 00:36:46 - [TEST_STEP][PASSED] - assert true: null

2020-03-29 00:36:46 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/CrossLocationReportBuilder_TestCases/TC77_Verify Created Report is displaying same as per the set configuration in report setup' successfully

2020-03-29 00:36:46 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CreatedReports/Verify Date Picker is displayed as defined Data Grain"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Verify Date Picker is displayed as defined Data Grain' successfully

2020-03-29 00:36:46 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CreatedReports/Verify Date Picker is displayed as defined Data Grain: Test Cases/ReportBuilder_Pages/CreatedReports/Verify Date Picker is displayed as defined Data Grain

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - waitForElementPresent(findTestObject("Created Reports Objects/StartDate"), 0): Object 'Object Repository/Created Reports Objects/StartDate' is present

2020-03-29 00:36:47 - [MESSAGE][WARNING] - Timeout '0' is invalid. Using default page load timeout: '30'

2020-03-29 00:36:47 - [MESSAGE][PASSED] - Object 'Object Repository/Created Reports Objects/StartDate' is present

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - waitForElementPresent(findTestObject("Created Reports Objects/EndDate"), 0): Object 'Object Repository/Created Reports Objects/EndDate' is present

2020-03-29 00:36:47 - [MESSAGE][WARNING] - Timeout '0' is invalid. Using default page load timeout: '30'

2020-03-29 00:36:47 - [MESSAGE][PASSED] - Object 'Object Repository/Created Reports Objects/EndDate' is present

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - StartDate = getText(findTestObject("Created Reports Objects/StartDate")): Text of object 'Object Repository/Created Reports Objects/StartDate' is: 'Start Week:'

2020-03-29 00:36:47 - [MESSAGE][PASSED] - Text of object 'Object Repository/Created Reports Objects/StartDate' is: 'Start Week:'

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - EndDate = getText(findTestObject("Created Reports Objects/EndDate")): Text of object 'Object Repository/Created Reports Objects/EndDate' is: 'End Week:'

2020-03-29 00:36:47 - [MESSAGE][PASSED] - Text of object 'Object Repository/Created Reports Objects/EndDate' is: 'End Week:'

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - presentBy = PresentBy: null

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - DataGrain = DataGrain: null

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - if (presentBy.equalsIgnoreCase("Day") || DataGrain.equalsIgnoreCase("Daily") && presentBy.equalsIgnoreCase("EntireRange")): null

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - else if (presentBy.equalsIgnoreCase("Week") || DataGrain.equalsIgnoreCase("Weekly") && presentBy.equalsIgnoreCase("EntireRange")): null

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - if (StartDate.equalsIgnoreCase("Start Week:") && EndDate.equalsIgnoreCase("End Week:")): null

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CreatedReports/setStartDate"), ["StartMonthYear":MonthYear, "StartDate":StartDate], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/setStartDate' successfully

2020-03-29 00:36:47 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CreatedReports/setStartDate: Test Cases/ReportBuilder_Pages/CreatedReports/setStartDate

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("ReportBuilderUI/StartDatePicker"), 5): Object 'Object Repository/ReportBuilderUI/StartDatePicker' is clickable

2020-03-29 00:36:47 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/StartDatePicker' is clickable

2020-03-29 00:36:47 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/StartDatePicker")): Object: 'Object Repository/ReportBuilderUI/StartDatePicker' is clicked on

2020-03-29 00:36:48 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/StartDatePicker' is clicked on

2020-03-29 00:36:48 - [TEST_STEP][PASSED] - monthYear = StartMonthYear: null

2020-03-29 00:36:48 - [TEST_STEP][PASSED] - while (!(getText(findTestObject("ReportBuilderUI/MonthValue")).equalsIgnoreCase(monthYear))): null

2020-03-29 00:36:48 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Mar, 2020'

2020-03-29 00:36:48 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backbtn")): Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Feb, 2020'

2020-03-29 00:36:48 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backbtn' is clicked on

2020-03-29 00:36:48 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Feb, 2020'

2020-03-29 00:36:48 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backbtn")): Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Jan, 2020'

2020-03-29 00:36:48 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backbtn' is clicked on

2020-03-29 00:36:49 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Jan, 2020'

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backbtn")): Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Dec, 2019'

2020-03-29 00:36:49 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backbtn' is clicked on

2020-03-29 00:36:49 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Dec, 2019'

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backbtn")): Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Nov, 2019'

2020-03-29 00:36:49 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backbtn' is clicked on

2020-03-29 00:36:49 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Nov, 2019'

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backbtn")): Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Oct, 2019'

2020-03-29 00:36:49 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backbtn' is clicked on

2020-03-29 00:36:49 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/MonthValue' is: 'Oct, 2019'

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - picker = driver.findElement(By.xpath("(//div[@class='dp-calendar-wrapper'])[1]")): null

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - Days = picker.findElements(By.tagName("div")): null

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - totalelementsfind = Days.size(): null

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - flag = 0: null

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - for ([i = 1, i < totalelementsfind, (i++)]): null

2020-03-29 00:36:49 - [TEST_STEP][PASSED] - Days1 = get(i).findElements(By.xpath("//button[@class='dp-calendar-day dp-current-month']")): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - totalelementsfind1 = Days1.size(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - for ([j = 0, j < totalelementsfind1, (j++)]): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(StartDate)): null

2020-03-29 00:36:50 - [TEST_STEP][PASSED] - get(j).click(): null

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - flag = 1: null

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - if (flag == 1): null

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:36:51 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/setStartDate' successfully

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CreatedReports/setEndDate"), ["EndMonthYear":EndMonthYear, "EndDate":EndDate], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/setEndDate' successfully

2020-03-29 00:36:51 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CreatedReports/setEndDate: Test Cases/ReportBuilder_Pages/CreatedReports/setEndDate

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("ReportBuilderUI/EndDatePicker"), 5): Object 'Object Repository/ReportBuilderUI/EndDatePicker' is clickable

2020-03-29 00:36:51 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/EndDatePicker' is clickable

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/EndDatePicker")): Object: 'Object Repository/ReportBuilderUI/EndDatePicker' is clicked on

2020-03-29 00:36:51 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/EndDatePicker' is clicked on

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - while (!(getText(findTestObject("Object Repository/ReportBuilderUI/EndMonthValue")).equalsIgnoreCase(EndMonthYear))): null

2020-03-29 00:36:51 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Mar, 2020'

2020-03-29 00:36:51 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backButttonEndMonth")): Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Feb, 2020'

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backButttonEndMonth' is clicked on

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Feb, 2020'

2020-03-29 00:36:52 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backButttonEndMonth")): Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Jan, 2020'

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backButttonEndMonth' is clicked on

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Jan, 2020'

2020-03-29 00:36:52 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backButttonEndMonth")): Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Dec, 2019'

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backButttonEndMonth' is clicked on

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Dec, 2019'

2020-03-29 00:36:52 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/cld_backButttonEndMonth")): Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Nov, 2019'

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/cld_backButttonEndMonth' is clicked on

2020-03-29 00:36:52 - [MESSAGE][PASSED] - Text of object 'Object Repository/ReportBuilderUI/EndMonthValue' is: 'Nov, 2019'

2020-03-29 00:36:52 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:36:52 - [TEST_STEP][PASSED] - picker = driver.findElement(By.xpath("(//div[@class='dp-calendar-wrapper'])[2]")): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - Days = picker.findElements(By.tagName("div")): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - totalelementsfind = Days.size(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - flag = 0: null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - for ([i = 1, i < totalelementsfind, (i++)]): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - Days1 = get(i).findElements(By.xpath("//button[@class='dp-calendar-day dp-current-month']")): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - totalelementsfind1 = Days1.size(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - for ([j = 0, j < totalelementsfind1, (j++)]): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:53 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - DayValue = get(j).getText(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (DayValue.equalsIgnoreCase(EndDate)): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - get(j).click(): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - flag = 1: null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - if (flag == 1): null

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:36:54 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/setEndDate' successfully

2020-03-29 00:36:54 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CreatedReports/Select stores 2"), ["StoreName":PCName], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Select stores 2' successfully

2020-03-29 00:36:54 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CreatedReports/Select stores 2: Test Cases/ReportBuilder_Pages/CreatedReports/Select stores 2

2020-03-29 00:36:55 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:36:55 - [TEST_STEP][PASSED] - click(findTestObject("Created Reports Objects/drp_StoreSelector")): Object: 'Object Repository/Created Reports Objects/drp_StoreSelector' is clicked on

2020-03-29 00:36:55 - [MESSAGE][PASSED] - Object: 'Object Repository/Created Reports Objects/drp_StoreSelector' is clicked on

2020-03-29 00:36:55 - [TEST_STEP][PASSED] - waitForElementClickable(findTestObject("Created Reports Objects/btn_checkAll"), 5): Object 'Object Repository/Created Reports Objects/btn_checkAll' is clickable

2020-03-29 00:36:55 - [MESSAGE][PASSED] - Object 'Object Repository/Created Reports Objects/btn_checkAll' is clickable

2020-03-29 00:36:55 - [TEST_STEP][PASSED] - click(findTestObject("Created Reports Objects/btn_checkAll")): Object: 'Object Repository/Created Reports Objects/btn_checkAll' is clicked on

2020-03-29 00:36:55 - [MESSAGE][PASSED] - Object: 'Object Repository/Created Reports Objects/btn_checkAll' is clicked on

2020-03-29 00:36:55 - [TEST_STEP][PASSED] - click(findTestObject("Created Reports Objects/link_uncheckAll")): Object: 'Object Repository/Created Reports Objects/link_uncheckAll' is clicked on

2020-03-29 00:36:55 - [MESSAGE][PASSED] - Object: 'Object Repository/Created Reports Objects/link_uncheckAll' is clicked on

2020-03-29 00:36:55 - [TEST_STEP][PASSED] - click(findTestObject("Created Reports Objects/input_SearchStores")): Object: 'Object Repository/Created Reports Objects/input_SearchStores' is clicked on

2020-03-29 00:36:56 - [MESSAGE][PASSED] - Object: 'Object Repository/Created Reports Objects/input_SearchStores' is clicked on

2020-03-29 00:36:56 - [TEST_STEP][PASSED] - setText(findTestObject("Created Reports Objects/input_SearchStores"), StoreName): Text 'Union Ave' is set on object 'Object Repository/Created Reports Objects/input_SearchStores'

2020-03-29 00:36:56 - [MESSAGE][PASSED] - Text 'Union Ave' is set on object 'Object Repository/Created Reports Objects/input_SearchStores'

2020-03-29 00:36:56 - [TEST_STEP][PASSED] - PCName = StoreName: null

2020-03-29 00:36:56 - [TEST_STEP][PASSED] - StoreInList = driver.findElement(By.xpath("//span[contains(text(),'" + PCName + "')]")): null

2020-03-29 00:36:56 - [TEST_STEP][PASSED] - StoreInList.click(): null

2020-03-29 00:36:56 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Select stores 2' successfully

2020-03-29 00:36:56 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CreatedReports/HitRefresh"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/HitRefresh' successfully

2020-03-29 00:36:56 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CreatedReports/HitRefresh: Test Cases/ReportBuilder_Pages/CreatedReports/HitRefresh

2020-03-29 00:36:57 - [TEST_STEP][PASSED] - click(findTestObject("ReportBuilderUI/btn_Refresh")): Object: 'Object Repository/ReportBuilderUI/btn_Refresh' is clicked on

2020-03-29 00:36:57 - [MESSAGE][PASSED] - Object: 'Object Repository/ReportBuilderUI/btn_Refresh' is clicked on

2020-03-29 00:36:57 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/HitRefresh' successfully

2020-03-29 00:36:57 - [TEST_STEP][PASSED] - waitForElementVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:57 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is visible

2020-03-29 00:36:57 - [TEST_STEP][PASSED] - waitForElementNotVisible(findTestObject("ReportBuilderUI/Progress_Bar"), 30): Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:37:05 - [MESSAGE][PASSED] - Object 'Object Repository/ReportBuilderUI/Progress_Bar' is NOT visible

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - assert true: null

2020-03-29 00:37:05 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Verify Date Picker is displayed as defined Data Grain' successfully

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoOfDaysFromReports = []: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoOfDaysFromReports = callTestCase(findTestCase("ReportBuilder_Pages/CreatedReports/Verify Dates on report based on selected present data by"), [:], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Verify Dates on report based on selected present data by' successfully

2020-03-29 00:37:05 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CreatedReports/Verify Dates on report based on selected present data by: Test Cases/ReportBuilder_Pages/CreatedReports/Verify Dates on report based on selected present data by

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - TotalDays = []: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - OnlyDays = []: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - DayWiseDate = []: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoWeeks = []: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - presentBy = PresentBy: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - if (presentBy.equalsIgnoreCase("Day")): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - else if (presentBy.equalsIgnoreCase("Week")): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - HeaderRow1 = driver.findElement(By.xpath("(//thead[@class="ui-table-thead"])[2]")): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - Headers1 = HeaderRow1.findElements(By.tagName("tr")): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - weeks = get(0).findElements(By.tagName("th")): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoOfWeekSelected = weeks.size(): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - for ([i = 0, i < NoOfWeekSelected, (i++)]): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - DateWeekElement = weeks.get(i): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", DateWeekElement): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - FirstWeek = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoWeeks.add(FirstWeek): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - DateWeekElement = weeks.get(i): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", DateWeekElement): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - FirstWeek = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoWeeks.add(FirstWeek): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - DateWeekElement = weeks.get(i): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", DateWeekElement): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - FirstWeek = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoWeeks.add(FirstWeek): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - DateWeekElement = weeks.get(i): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", DateWeekElement): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - FirstWeek = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - NoWeeks.add(FirstWeek): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - FirstWeekDate = NoWeeks[0]: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - reportbuildercustom.RB_Keywords.verifyStartWeekDateOnReport(FirstWeekDate): reportbuildercustom.RB_Keywords.verifyStartWeekDateOnReport is PASSED

2020-03-29 00:37:05 - [MESSAGE][PASSED] - reportbuildercustom.RB_Keywords.verifyStartWeekDateOnReport is PASSED

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - if (NoWeeks.size() > 1): reportbuildercustom.RB_Keywords.verifyEndWeekDateOnReport is PASSED

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - LastDateCnt = NoWeeks.size() - 1: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - LastDateWeek = NoWeeks[LastDateCnt]: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - reportbuildercustom.RB_Keywords.verifyEndWeekDateOnReport(LastDateWeek): reportbuildercustom.RB_Keywords.verifyEndWeekDateOnReport is PASSED

2020-03-29 00:37:05 - [MESSAGE][PASSED] - reportbuildercustom.RB_Keywords.verifyEndWeekDateOnReport is PASSED

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - noOfweesdiff = reportbuildercustom.RB_Keywords.noOfWeeksBasedOnDate(): reportbuildercustom.RB_Keywords.noOfWeeksBasedOnDate is PASSED

2020-03-29 00:37:05 - [MESSAGE][PASSED] - reportbuildercustom.RB_Keywords.noOfWeeksBasedOnDate is PASSED

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - weekDiff = String.valueOf(noOfweesdiff): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - WeekLimit = NoOfWeeks: null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - if (WeekLimit.equalsIgnoreCase(weekDiff)): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - println(DayWiseDate): null

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - return DayWiseDate: null

2020-03-29 00:37:05 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Verify Dates on report based on selected present data by' successfully

2020-03-29 00:37:05 - [TEST_STEP][PASSED] - callTestCase(findTestCase("ReportBuilder_Pages/CreatedReports/Verify all added columns in report is same as added during set up"), ["AddedColumnsSize":TotalNoOfColumnsAdded, "SetUpList":ColumnListNew], CONTINUE_ON_FAILURE): Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Verify all added columns in report is same as added during set up' successfully

2020-03-29 00:37:05 - [TEST_CASE][PASSED] - Test Cases/ReportBuilder_Pages/CreatedReports/Verify all added columns in report is same as added during set up: Test Cases/ReportBuilder_Pages/CreatedReports/Verify all added columns in report is same as added during set up

2020-03-29 00:37:06 - [TEST_STEP][NOT_RUN] - click(findTestObject("Created Reports Objects/btn_collapseSidebar")): NOT_RUN: click(findTestObject("Created Reports Objects/btn_collapseSidebar"))

2020-03-29 00:37:06 - [MESSAGE][NOT_RUN] - NOT_RUN: click(findTestObject("Created Reports Objects/btn_collapseSidebar"))

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - HeaderRow = driver.findElement(By.xpath("(//thead[@class="ui-table-thead"])[2]")): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - Headers = HeaderRow.findElements(By.tagName("tr")): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - TotalAddedColumns = get(1).findElements(By.tagName("th")): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - NoOfdaysSelected = TotalAddedColumns.size(): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport = []: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumns = AddedColumnsSize: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - for ([i = 0, i < AddedColumns, (i++)]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:06 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:07 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:08 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:09 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:09 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:09 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:09 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:10 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameOnReport = TotalAddedColumns.get(i): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView()", AddedColumnNameOnReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - AddedColumnNameReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - ColumnListFromReport.add(i, AddedColumnNameReport): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println(ColumnListFromReport[i]): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("*************ON REPORT******************"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - setupListNew = SetUpList: null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - if (ColumnListFromReport.equals(setupListNew)): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - println("colums matched"): null

2020-03-29 00:37:11 - [TEST_STEP][PASSED] - assert true: null

2020-03-29 00:37:11 - [MESSAGE][PASSED] - Call Test Case 'Test Cases/ReportBuilder_Pages/CreatedReports/Verify all added columns in report is same as added during set up' successfully

2020-03-29 00:37:11 - [TEST_STEP][FAILED] - callTestCase(findTestCase("ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week"), ["SetUpListToGetData":valuesFromCalendarDashboard, "DayWiseDates":NoOfDaysFromReports, "NoOfAddedColumns":TotalNoOfColumnsAdded], CONTINUE_ON_FAILURE): Unable to call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' (Root cause: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
)

2020-03-29 00:37:11 - [TEST_CASE][ERROR] - Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week: Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week FAILED.
Reason:
org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more


2020-03-29 00:37:12 - [TEST_STEP][PASSED] - NetSalesFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - NetSalesLastYearFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - BudgetedSalesFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - COGSFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - COGSLastYearFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - COGSBudgetFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - PrimeCostFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - PrimeCostLastYearFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - PrimeCostBudgetFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - LaborFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - LaborLastYearFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - LaborBudgetFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - AllVariablesFromReport = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - index = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - NewIndex = <not implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression>: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareNetSales = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareNetSalesLY = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareCOGS = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - ComapreCOGSLY = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - ComparePrimeCost = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - ComparePrimeCostLY = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareLaborCostTY = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareLaborCostLY = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareLaborCostBudget = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareCOGSBudget = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - ComparePrimerCostBudget = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - CompareSalesBudget = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - fecthDates = []: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - allvaluesFromCal = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - allvaluesFromCal = SetUpListToGetData: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - fecthDates = allvaluesFromCal.get("CalandarValues"): null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - sizeOfColumns = NoOfAddedColumns: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - ValuesFromCalender = [:]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - ValuesFromCalender = allvaluesFromCal.get("VariableValues"): null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - DateIndex = 0: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - StoreName = PCName: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - user = username: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - listForReportColumns = ["Net Sales $", "Net Sales LY $", "Sales Budget $", "Labor Cost, $", "Labor Cost LY, $", "Labor Cost Budget, $ (actual sales)", "COGS Total, %", "COGS Total LY, %", "COGS Budget, %", "Prime Cost, %", "Prime Cost LY, %", "Prime Cost Budget, %"]: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - driver = getWebDriver(): null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - je = driver: null

2020-03-29 00:37:12 - [TEST_STEP][PASSED] - delay(3): Delayed 3 second(s)

2020-03-29 00:37:15 - [MESSAGE][PASSED] - Delayed 3 second(s)

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - if (user.equalsIgnoreCase("admin.insight360@analytix.com")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - else: null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - println("in else loop"): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Tabel = driver.findElement(By.xpath("(//tbody[@class='ui-table-tbody'])[2]")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Rows = Tabel.findElements(By.tagName("tr")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - for ([j = 0, j < Rows.size(), (j++)]): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - if (trim().length() > 8): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - if (trim().length() > 8): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - VariableRow = Rows.get(j): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - cells = VariableRow.findElements(By.tagName("td")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Variablename = get(0).getText(): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - if (trim().length() > 8): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - gotStorename = length()).trim(): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - println(gotStorename): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - if (gotStorename.equalsIgnoreCase(StoreName)): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - NewIndex = j: null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - println("Here is new index value" + NewIndex): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - HeaderRow = driver.findElement(By.xpath("(//thead[@class="ui-table-thead"])[2]")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - HeadersRowTotal = HeaderRow.findElements(By.tagName("tr")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Headers = get(1).findElements(By.tagName("th")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - for ([i = 0, i < Headers.size(), (i++)]): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - case "Net Sales $":: null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:15 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:15 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetsalesReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesReport1): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetsalesReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(NetsalesReport): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - comment(NetsalesReport): $7,913.43

2020-03-29 00:37:16 - [MESSAGE][INFO] - $7,913.43

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetSalesFromReport.put(fecthDates[DateIndex], NetsalesReport): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - case "Net Sales LY $":: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:16 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetsalesLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesLYReport1): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetsalesLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(NetsalesLYReport): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - comment(NetsalesLYReport): $0.00

2020-03-29 00:37:16 - [MESSAGE][INFO] - $0.00

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetSalesLastYearFromReport.put(fecthDates[DateIndex], NetsalesLYReport): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - case "Sales Budget $":: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - logInfo("FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:16 - [MESSAGE][INFO] - FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetsalesBudgetReport2 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesBudgetReport2): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - NetsalesBudgetReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(NetsalesBudgetReport): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - comment(NetsalesBudgetReport): $0.00

2020-03-29 00:37:16 - [MESSAGE][INFO] - $0.00

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - BudgetedSalesFromReport.put(fecthDates[DateIndex], NetsalesBudgetReport): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:16 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - case "Labor Cost, $":: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:17 - [MESSAGE][INFO] - FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - LaborCostTYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostTYReport1): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - LaborCostTYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(LaborCostTYReport): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - comment(LaborCostTYReport): $0.00

2020-03-29 00:37:17 - [MESSAGE][INFO] - $0.00

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - LaborFromReport.put(fecthDates[DateIndex], LaborCostTYReport): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - case "Labor Cost LY, $":: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:17 - [MESSAGE][INFO] - FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - LaborCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostLYReport1): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - LaborCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(LaborCostLYReport): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - comment(LaborCostLYReport): $0.00

2020-03-29 00:37:17 - [MESSAGE][INFO] - $0.00

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - LaborLastYearFromReport.put(fecthDates[DateIndex], LaborCostLYReport): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - case "Labor Cost Budget, $ (actual sales)":: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - logInfo("FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:17 - [MESSAGE][INFO] - FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:17 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostBudgetDollorReport1): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - println(LaborCostBudgetDollorReport): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - comment(LaborCostBudgetDollorReport): $0.00

2020-03-29 00:37:18 - [MESSAGE][INFO] - $0.00

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - LaborBudgetFromReport.put(fecthDates[DateIndex], LaborCostBudgetDollorReport): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:18 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:41 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:41 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:41 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:41 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:41 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:42 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - case "COGS Total, %":: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total, %  FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total, %  FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:43 - [MESSAGE][INFO] - FETCHING COGS Total, %  FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - COGSReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSReport1): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - COGSReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(COGSReport): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - comment(COGSReport): 0.00%

2020-03-29 00:37:43 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - COGSFromReport.put(fecthDates[DateIndex], COGSReport): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - case "COGS Total LY, %":: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total LY, % FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:43 - [MESSAGE][INFO] - FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - COGSLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSLYReport1): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - COGSLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(COGSLYReport): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - comment(COGSLYReport): 0.00%

2020-03-29 00:37:43 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - COGSLastYearFromReport.put(fecthDates[DateIndex], COGSLYReport): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:43 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - case "COGS Budget, %":: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:44 - [MESSAGE][INFO] - FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - CogsBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", CogsBudgetPercentReport1): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - CogsBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(CogsBudgetPercentReport): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - comment(CogsBudgetPercentReport): 0.00%

2020-03-29 00:37:44 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - COGSBudgetFromReport.put(fecthDates[DateIndex], CogsBudgetPercentReport): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - case "Prime Cost, %":: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:44 - [MESSAGE][INFO] - FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - PrimeCostReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostReport1): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - PrimeCostReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(PrimeCostReport): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - comment(PrimeCostReport): 0.00%

2020-03-29 00:37:44 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - PrimeCostFromReport.put(fecthDates[DateIndex], PrimeCostReport): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - case "Prime Cost LY, %":: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:44 - [MESSAGE][INFO] - FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:44 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - PrimeCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostLYReport1): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - PrimeCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(PrimeCostLYReport): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - comment(PrimeCostLYReport): 0.00%

2020-03-29 00:37:45 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - PrimeCostLastYearFromReport.put(fecthDates[DateIndex], PrimeCostLYReport): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - case "Prime Cost Budget, %":: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:45 - [MESSAGE][INFO] - FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: OCT 27 TO NOV 2

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeBudgetPercentReport1): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(PrimeBudgetPercentReport): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - comment(PrimeBudgetPercentReport): 0.00%

2020-03-29 00:37:45 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - PrimeCostBudgetFromReport.put(fecthDates[DateIndex], PrimeBudgetPercentReport): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM REPORT FOR DATE  +" + fecthDates[DateIndex] + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + OCT 27 TO NOV 2+ is completed successfully....

2020-03-29 00:37:45 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + OCT 27 TO NOV 2+ is completed successfully....

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - (DateIndex++): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - case "Net Sales $":: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:45 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - NetsalesReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesReport1): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - NetsalesReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(NetsalesReport): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - comment(NetsalesReport): $21,258.15

2020-03-29 00:37:45 - [MESSAGE][INFO] - $21,258.15

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - NetSalesFromReport.put(fecthDates[DateIndex], NetsalesReport): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - case "Net Sales LY $":: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:45 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:45 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - NetsalesLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesLYReport1): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - NetsalesLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(NetsalesLYReport): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - comment(NetsalesLYReport): $0.00

2020-03-29 00:37:46 - [MESSAGE][INFO] - $0.00

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - NetSalesLastYearFromReport.put(fecthDates[DateIndex], NetsalesLYReport): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - case "Sales Budget $":: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - logInfo("FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:46 - [MESSAGE][INFO] - FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - NetsalesBudgetReport2 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesBudgetReport2): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - NetsalesBudgetReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(NetsalesBudgetReport): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - comment(NetsalesBudgetReport): $0.00

2020-03-29 00:37:46 - [MESSAGE][INFO] - $0.00

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - BudgetedSalesFromReport.put(fecthDates[DateIndex], NetsalesBudgetReport): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - case "Labor Cost, $":: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:46 - [MESSAGE][INFO] - FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:37:46 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborCostTYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostTYReport1): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborCostTYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(LaborCostTYReport): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - comment(LaborCostTYReport): $0.00

2020-03-29 00:38:29 - [MESSAGE][INFO] - $0.00

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborFromReport.put(fecthDates[DateIndex], LaborCostTYReport): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - case "Labor Cost LY, $":: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:29 - [MESSAGE][INFO] - FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostLYReport1): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(LaborCostLYReport): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - comment(LaborCostLYReport): $0.00

2020-03-29 00:38:29 - [MESSAGE][INFO] - $0.00

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborLastYearFromReport.put(fecthDates[DateIndex], LaborCostLYReport): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - case "Labor Cost Budget, $ (actual sales)":: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - logInfo("FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:29 - [MESSAGE][INFO] - FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostBudgetDollorReport1): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - println(LaborCostBudgetDollorReport): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - comment(LaborCostBudgetDollorReport): $0.00

2020-03-29 00:38:29 - [MESSAGE][INFO] - $0.00

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - LaborBudgetFromReport.put(fecthDates[DateIndex], LaborCostBudgetDollorReport): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:29 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - case "COGS Total, %":: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total, %  FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total, %  FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:30 - [MESSAGE][INFO] - FETCHING COGS Total, %  FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:30 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - COGSReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSReport1): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - COGSReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(COGSReport): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - comment(COGSReport): 0.00%

2020-03-29 00:38:31 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - COGSFromReport.put(fecthDates[DateIndex], COGSReport): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - case "COGS Total LY, %":: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total LY, % FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:31 - [MESSAGE][INFO] - FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - COGSLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSLYReport1): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - COGSLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(COGSLYReport): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - comment(COGSLYReport): 0.00%

2020-03-29 00:38:31 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - COGSLastYearFromReport.put(fecthDates[DateIndex], COGSLYReport): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - case "COGS Budget, %":: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:32 - [MESSAGE][INFO] - FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - CogsBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", CogsBudgetPercentReport1): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - CogsBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(CogsBudgetPercentReport): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - comment(CogsBudgetPercentReport): 0.00%

2020-03-29 00:38:32 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - COGSBudgetFromReport.put(fecthDates[DateIndex], CogsBudgetPercentReport): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - case "Prime Cost, %":: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:32 - [MESSAGE][INFO] - FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - PrimeCostReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostReport1): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - PrimeCostReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(PrimeCostReport): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - comment(PrimeCostReport): 0.00%

2020-03-29 00:38:32 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - PrimeCostFromReport.put(fecthDates[DateIndex], PrimeCostReport): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - case "Prime Cost LY, %":: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:32 - [MESSAGE][INFO] - FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:32 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - PrimeCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostLYReport1): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - PrimeCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(PrimeCostLYReport): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - comment(PrimeCostLYReport): 0.00%

2020-03-29 00:38:33 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - PrimeCostLastYearFromReport.put(fecthDates[DateIndex], PrimeCostLYReport): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - case "Prime Cost Budget, %":: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:33 - [MESSAGE][INFO] - FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: NOV 3 TO NOV 9

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeBudgetPercentReport1): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(PrimeBudgetPercentReport): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - comment(PrimeBudgetPercentReport): 0.00%

2020-03-29 00:38:33 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - PrimeCostBudgetFromReport.put(fecthDates[DateIndex], PrimeBudgetPercentReport): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM REPORT FOR DATE  +" + fecthDates[DateIndex] + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + NOV 3 TO NOV 9+ is completed successfully....

2020-03-29 00:38:33 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + NOV 3 TO NOV 9+ is completed successfully....

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - (DateIndex++): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - case "Net Sales $":: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:38:33 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - NetsalesReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesReport1): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - NetsalesReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(NetsalesReport): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - comment(NetsalesReport): $26,794.47

2020-03-29 00:38:33 - [MESSAGE][INFO] - $26,794.47

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - NetSalesFromReport.put(fecthDates[DateIndex], NetsalesReport): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - case "Net Sales LY $":: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:38:33 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:38:33 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - NetsalesLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesLYReport1): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - NetsalesLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - println(NetsalesLYReport): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - comment(NetsalesLYReport): $0.00

2020-03-29 00:38:34 - [MESSAGE][INFO] - $0.00

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - NetSalesLastYearFromReport.put(fecthDates[DateIndex], NetsalesLYReport): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:38:34 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:21 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:21 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:21 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:21 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:21 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - case "Sales Budget $":: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - logInfo("FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:22 - [MESSAGE][INFO] - FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - NetsalesBudgetReport2 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesBudgetReport2): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - NetsalesBudgetReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(NetsalesBudgetReport): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - comment(NetsalesBudgetReport): $0.00

2020-03-29 00:39:22 - [MESSAGE][INFO] - $0.00

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - BudgetedSalesFromReport.put(fecthDates[DateIndex], NetsalesBudgetReport): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - case "Labor Cost, $":: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:22 - [MESSAGE][INFO] - FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - LaborCostTYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostTYReport1): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - LaborCostTYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(LaborCostTYReport): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - comment(LaborCostTYReport): $0.00

2020-03-29 00:39:22 - [MESSAGE][INFO] - $0.00

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - LaborFromReport.put(fecthDates[DateIndex], LaborCostTYReport): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:22 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - case "Labor Cost LY, $":: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:23 - [MESSAGE][INFO] - FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - LaborCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostLYReport1): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - LaborCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(LaborCostLYReport): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - comment(LaborCostLYReport): $0.00

2020-03-29 00:39:23 - [MESSAGE][INFO] - $0.00

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - LaborLastYearFromReport.put(fecthDates[DateIndex], LaborCostLYReport): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - case "Labor Cost Budget, $ (actual sales)":: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - logInfo("FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:23 - [MESSAGE][INFO] - FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostBudgetDollorReport1): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(LaborCostBudgetDollorReport): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - comment(LaborCostBudgetDollorReport): $0.00

2020-03-29 00:39:23 - [MESSAGE][INFO] - $0.00

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - LaborBudgetFromReport.put(fecthDates[DateIndex], LaborCostBudgetDollorReport): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:23 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - case "COGS Total, %":: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total, %  FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total, %  FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:24 - [MESSAGE][INFO] - FETCHING COGS Total, %  FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - COGSReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSReport1): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - COGSReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(COGSReport): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - comment(COGSReport): 0.00%

2020-03-29 00:39:24 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - COGSFromReport.put(fecthDates[DateIndex], COGSReport): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:24 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - case "COGS Total LY, %":: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total LY, % FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:25 - [MESSAGE][INFO] - FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - COGSLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSLYReport1): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - COGSLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(COGSLYReport): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - comment(COGSLYReport): 0.00%

2020-03-29 00:39:25 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - COGSLastYearFromReport.put(fecthDates[DateIndex], COGSLYReport): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - case "COGS Budget, %":: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:25 - [MESSAGE][INFO] - FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - CogsBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", CogsBudgetPercentReport1): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - CogsBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(CogsBudgetPercentReport): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - comment(CogsBudgetPercentReport): 0.00%

2020-03-29 00:39:25 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - COGSBudgetFromReport.put(fecthDates[DateIndex], CogsBudgetPercentReport): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:25 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - case "Prime Cost, %":: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:26 - [MESSAGE][INFO] - FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - PrimeCostReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostReport1): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - PrimeCostReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(PrimeCostReport): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - comment(PrimeCostReport): 0.00%

2020-03-29 00:39:26 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - PrimeCostFromReport.put(fecthDates[DateIndex], PrimeCostReport): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - case "Prime Cost LY, %":: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:26 - [MESSAGE][INFO] - FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - PrimeCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostLYReport1): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - PrimeCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(PrimeCostLYReport): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - comment(PrimeCostLYReport): 0.00%

2020-03-29 00:39:26 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - PrimeCostLastYearFromReport.put(fecthDates[DateIndex], PrimeCostLYReport): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - case "Prime Cost Budget, %":: null

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:26 - [MESSAGE][INFO] - FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: NOV 10 TO NOV 16

2020-03-29 00:39:26 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeBudgetPercentReport1): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(PrimeBudgetPercentReport): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - comment(PrimeBudgetPercentReport): 0.00%

2020-03-29 00:41:11 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - PrimeCostBudgetFromReport.put(fecthDates[DateIndex], PrimeBudgetPercentReport): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM REPORT FOR DATE  +" + fecthDates[DateIndex] + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + NOV 10 TO NOV 16+ is completed successfully....

2020-03-29 00:41:11 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + NOV 10 TO NOV 16+ is completed successfully....

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - (DateIndex++): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - case "Net Sales $":: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:11 - [MESSAGE][INFO] - FETCHING NET SALES TY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - NetsalesReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesReport1): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - NetsalesReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(NetsalesReport): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - comment(NetsalesReport): $18,639.38

2020-03-29 00:41:11 - [MESSAGE][INFO] - $18,639.38

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - NetSalesFromReport.put(fecthDates[DateIndex], NetsalesReport): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - case "Net Sales LY $":: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - logInfo("FETCHING NET SALES LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:11 - [MESSAGE][INFO] - FETCHING NET SALES LY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:11 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - NetsalesLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesLYReport1): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - NetsalesLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(NetsalesLYReport): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - comment(NetsalesLYReport): $0.00

2020-03-29 00:41:12 - [MESSAGE][INFO] - $0.00

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - NetSalesLastYearFromReport.put(fecthDates[DateIndex], NetsalesLYReport): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - case "Sales Budget $":: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - logInfo("FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:12 - [MESSAGE][INFO] - FETCHING  Sales Budget $  VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - NetsalesBudgetReport2 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", NetsalesBudgetReport2): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - NetsalesBudgetReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(NetsalesBudgetReport): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - comment(NetsalesBudgetReport): $0.00

2020-03-29 00:41:12 - [MESSAGE][INFO] - $0.00

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - BudgetedSalesFromReport.put(fecthDates[DateIndex], NetsalesBudgetReport): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - case "Labor Cost, $":: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:12 - [MESSAGE][INFO] - FETCHING LABOR COST TY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:12 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborCostTYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostTYReport1): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborCostTYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(LaborCostTYReport): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - comment(LaborCostTYReport): $0.00

2020-03-29 00:41:13 - [MESSAGE][INFO] - $0.00

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborFromReport.put(fecthDates[DateIndex], LaborCostTYReport): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - case "Labor Cost LY, $":: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - logInfo("FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:13 - [MESSAGE][INFO] - FETCHING LABOR COST LY VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostLYReport1): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(LaborCostLYReport): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - comment(LaborCostLYReport): $0.00

2020-03-29 00:41:13 - [MESSAGE][INFO] - $0.00

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborLastYearFromReport.put(fecthDates[DateIndex], LaborCostLYReport): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - case "Labor Cost Budget, $ (actual sales)":: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - logInfo("FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:13 - [MESSAGE][INFO] - FETCHING Labor Cost Budget, $ (actual sales) VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", LaborCostBudgetDollorReport1): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborCostBudgetDollorReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(LaborCostBudgetDollorReport): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - comment(LaborCostBudgetDollorReport): $0.00

2020-03-29 00:41:13 - [MESSAGE][INFO] - $0.00

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - LaborBudgetFromReport.put(fecthDates[DateIndex], LaborCostBudgetDollorReport): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:13 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - case "COGS Total, %":: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total, %  FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total, %  FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:14 - [MESSAGE][INFO] - FETCHING COGS Total, %  FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - COGSReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSReport1): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - COGSReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(COGSReport): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - comment(COGSReport): 0.00%

2020-03-29 00:41:14 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - COGSFromReport.put(fecthDates[DateIndex], COGSReport): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:14 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - case "COGS Total LY, %":: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Total LY, % FROM CALENDAR FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:15 - [MESSAGE][INFO] - FETCHING COGS Total LY, % FROM CALENDAR FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - COGSLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", COGSLYReport1): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - COGSLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(COGSLYReport): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - comment(COGSLYReport): 0.00%

2020-03-29 00:41:15 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - COGSLastYearFromReport.put(fecthDates[DateIndex], COGSLYReport): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - case "COGS Budget, %":: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - logInfo("FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:15 - [MESSAGE][INFO] - FETCHING COGS Budget, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - CogsBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", CogsBudgetPercentReport1): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - CogsBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(CogsBudgetPercentReport): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - comment(CogsBudgetPercentReport): 0.00%

2020-03-29 00:41:15 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - COGSBudgetFromReport.put(fecthDates[DateIndex], CogsBudgetPercentReport): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:41:15 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - case "Prime Cost, %":: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:43:31 - [MESSAGE][INFO] - FETCHING Prime Cost, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:43:31 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeCostReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostReport1): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeCostReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(PrimeCostReport): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - comment(PrimeCostReport): 0.00%

2020-03-29 00:43:32 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeCostFromReport.put(fecthDates[DateIndex], PrimeCostReport): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - case "Prime Cost LY, %":: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:43:32 - [MESSAGE][INFO] - FETCHING Prime Cost LY, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeCostLYReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeCostLYReport1): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeCostLYReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(PrimeCostLYReport): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - comment(PrimeCostLYReport): 0.00%

2020-03-29 00:43:32 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeCostLastYearFromReport.put(fecthDates[DateIndex], PrimeCostLYReport): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - switch (HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - case "Prime Cost Budget, %":: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - logInfo("FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE:" + fecthDates[DateIndex]): FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:43:32 - [MESSAGE][INFO] - FETCHING Prime Cost Budget, % VALUE FROM REPORT FOR DATE: NOV 17 TO NOV 23

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - index = i: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - Tabel2 = driver.findElement(By.xpath("(//tbody[@class="ui-table-tbody"])[4]")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - Rows2 = Tabel2.findElements(By.tagName("tr")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - RequiredRow = Rows2.get(NewIndex): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - cellsNew = RequiredRow.findElements(By.tagName("td")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport1 = get(index).findElement(By.tagName("div")): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", PrimeBudgetPercentReport1): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeBudgetPercentReport = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(PrimeBudgetPercentReport): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - comment(PrimeBudgetPercentReport): 0.00%

2020-03-29 00:43:32 - [MESSAGE][INFO] - 0.00%

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - PrimeCostBudgetFromReport.put(fecthDates[DateIndex], PrimeBudgetPercentReport): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - break: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderNameElement = Headers.get(i): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - je.executeScript("arguments[0].scrollIntoView(true);", HeaderNameElement): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - HeaderName = replaceAll("", " ").replaceAll("
", " "): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - println(HeaderName): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (listForReportColumns.contains(HeaderName)): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - noofcolumn = sizeOfColumns: null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - if (i + 1 % noofcolumn == 0): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - markPassed("EXECUTION OF GETTING DATA FROM REPORT FOR DATE  +" + fecthDates[DateIndex] + "+ is completed successfully...."): EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + NOV 17 TO NOV 23+ is completed successfully....

2020-03-29 00:43:32 - [MESSAGE][PASSED] - EXECUTION OF GETTING DATA FROM REPORT FOR DATE  + NOV 17 TO NOV 23+ is completed successfully....

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - (DateIndex++): null

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - logInfo("'******************DELETE EXCEL FILE*******************'"): '******************DELETE EXCEL FILE*******************'

2020-03-29 00:43:32 - [MESSAGE][INFO] - '******************DELETE EXCEL FILE*******************'

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - excelUtils.ExcelsCustom.deleteCalFile(): excelUtils.ExcelsCustom.deleteCalFile is PASSED

2020-03-29 00:43:32 - [MESSAGE][PASSED] - excelUtils.ExcelsCustom.deleteCalFile is PASSED

2020-03-29 00:43:32 - [TEST_STEP][PASSED] - logInfo("'******************CREATING EXCEL FILE*******************'"): '******************CREATING EXCEL FILE*******************'

2020-03-29 00:43:32 - [MESSAGE][INFO] - '******************CREATING EXCEL FILE*******************'

2020-03-29 00:43:32 - [TEST_STEP][ERROR] - excelUtils.CreateSheet.createExcel(): java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)

2020-03-29 00:43:33 - [MESSAGE][ERROR] - java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)

2020-03-29 00:43:33 - [MESSAGE][FAILED] - Unable to call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' (Root cause: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
)

2020-03-29 00:43:33 - [TEST_STEP][PASSED] - Start listener action : afterTestcase: null]]></system-out>
         <system-err><![CDATA[2020-03-29 00:34:14 - [TEST_CASE][FAILED] - Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period: Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period FAILED.
Reason:
com.kms.katalon.core.exception.StepFailedException: Unable to call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' (Root cause: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:39)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:70)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	... 18 more
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more]]></system-err>
      </testcase>
      <system-out><![CDATA[2020-03-29 00:33:57 - [TEST_SUITE][FAILED] - Weekly Report End to End Suit: Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period FAILED.
Reason:
com.kms.katalon.core.exception.StepFailedException: Unable to call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' (Root cause: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:39)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:70)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	... 18 more
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more]]></system-out>
      <system-err><![CDATA[2020-03-29 00:33:57 - [TEST_SUITE][FAILED] - Weekly Report End to End Suit: Test Cases/CrossLocationReportBuilder_TestCases/TC79_Create Weekly Report with valid details and compare report values with calender for specific time period FAILED.
Reason:
com.kms.katalon.core.exception.StepFailedException: Unable to call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' (Root cause: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more
)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:39)
	at com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:70)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.callTestCase(CallTestCaseKeyword.groovy:81)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword.execute(CallTestCaseKeyword.groovy:44)
	at com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:72)
	at com.kms.katalon.core.keyword.BuiltinKeywords.callTestCase(BuiltinKeywords.groovy:334)
	at TC79_Create Weekly Report with valid details and compare report values with calender for specific time period.run(TC79_Create Weekly Report with valid details and compare report values with calender for specific time period:79)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:169)
	at com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:142)
	at com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:91)
	at com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:157)
	at com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)
	at TempTestSuite1585422234855.run(TempTestSuite1585422234855.groovy:36)
Caused by: com.kms.katalon.core.exception.StepErrorException: Call Test Case 'Test Cases/ReportBuilder_Pages/Restaurant_Intranet_Dashboard_Page/Fetch variable values from created report and do comapre with calendar values for each week' failed because of error(s)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:66)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.call(CallTestCaseKeyword.groovy)
	at com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:68)
	... 18 more
Caused by: org.codehaus.groovy.runtime.InvokerInvocationException: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.ExcelsCustom.invokeMethod(ExcelsCustom.groovy)
	at com.kms.katalon.core.main.CustomKeywordDelegatingMetaClass.invokeStaticMethod(CustomKeywordDelegatingMetaClass.java:50)
	at Fetch variable values from created report and do comapre with calendar values for each week.run(Fetch variable values from created report and do comapre with calendar values for each week:544)
	at com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:194)
	at com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:119)
	at com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:337)
	at com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:328)
	at com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:307)
	at com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:299)
	at com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:233)
	at com.kms.katalon.core.main.TestCaseMain.runTestCase(TestCaseMain.java:114)
	at com.kms.katalon.core.keyword.builtin.CallTestCaseKeyword$_callTestCase_closure1.doCall(CallTestCaseKeyword.groovy:59)
	... 20 more
Caused by: java.io.FileNotFoundException: D:\Users\bksangani\Katalon Studio\ReportBuilderV1\ExcelResult\CompareCalendarWithReport.xlsx (The process cannot access the file because it is being used by another process)
	at excelUtils.CreateSheet.createExcel(CreateExcel.groovy:61)
	... 32 more]]></system-err>
   </testsuite>
</testsuites>
